// This file is auto-generated. Do not edit!
// baka:source packages/utils/scss/all.scss

// #region @import "./index.import.scss"; -> packages/utils/scss/index.import.scss
// #region @import "./_functions.scss"; -> packages/utils/scss/_functions.scss
// #region @import "@progress/kendo-theme-core/scss/functions/index.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/index.import.scss
// #region @import "../_variables.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/_variables.scss
// Equilateral triangle variables
$equilateral-index: 1.7320508076 !default;
$equilateral-height: .8660254038 !default;

// #endregion

// #region @import "./_color.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_color.import.scss
@function k-color-alpha( $color ) {
    @return alpha( $color );
}

@function k-color-red( $color ) {
    @return red( $color );
}

@function k-color-green( $color ) {
    @return green( $color );
}

@function k-color-blue( $color ) {
    @return blue( $color );
}

@function k-color-hue( $color ) {
    @return hue( $color );
}

@function k-color-saturation( $color ) {
    @return saturation( $color );
}

@function k-color-lightness( $color ) {
    @return lightness( $color );
}

@function k-color-mix( $color1, $color2, $weight: 50% ) {
    @return mix( $color1, $color2, $weight );
}

@function k-color-darken( $color, $amount) {
    @return darken( $color, $amount );
}

@function k-color-lighten( $color, $amount) {
    @return lighten( $color, $amount );
}

@function k-color-adjust-hue( $color, $degrees ) {
    @return adjust-hue( $color, $degrees );
}

@function k-color-saturate( $color, $amount ) {
    @return saturate( $color, $amount );
}

@function k-color-desaturate( $color, $amount ) {
    @return desaturate( $color, $amount );
}

@function k-color-grayscale( $color ) {
    @return grayscale( $color );
}

@function k-color-complement( $color ) {
    @return complement( $color );
}

@function k-color-invert( $color ) {
    @return invert( $color );
}

// #endregion
// #region @import "./_color-contrast.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_color-contrast.import.scss
// Adapted from https://gist.github.com/sgomes/ccc72f71137fe29039c92c0a9fe9b657
// Adapted from https://github.com/twbs/bootstrap/commit/03908ea37a55eaa44c12ce5694dddc1630c980b3

//  Precomputed linear color channel values, for use in contrast calculations.
//  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//
//  Algorithm, for c in 0 to 255:
//  f(c) {
//    c = c / 255;
//    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
//  }
//
//  This lookup table is needed since there is no `pow` in SASS.
// stylelint-disable-next-line scss/dollar-variable-default
$_linear-channel-values: (
    0
    .0003035269835488375
    .000607053967097675
    .0009105809506465125
    .00121410793419535
    .0015176349177441874
    .001821161901293025
    .0021246888848418626
    .0024282158683907
    .0027317428519395373
    .003035269835488375
    .003346535763899161
    .003676507324047436
    .004024717018496307
    .004391442037410293
    .004776953480693729
    .005181516702338386
    .005605391624202723
    .006048833022857054
    .006512090792594475
    .006995410187265387
    .007499032043226175
    .008023192985384994
    .008568125618069307
    .009134058702220787
    .00972121732023785
    .010329823029626936
    .010960094006488246
    .011612245179743885
    .012286488356915872
    .012983032342173012
    .013702083047289686
    .014443843596092545
    .01520851442291271
    .01599629336550963
    .016807375752887384
    .017641954488384078
    .018500220128379697
    .019382360956935723
    .0202885630566524
    .021219010376003555
    .022173884793387385
    .02315336617811041
    .024157632448504756
    .02518685962736163
    .026241221894849898
    .027320891639074894
    .028426039504420793
    .0295568344378088
    .030713443732993635
    .03189603307301153
    .033104766570885055
    .03433980680868217
    .03560131487502034
    .03688945040110004
    .0382043715953465
    .03954623527673284
    .04091519690685319
    .042311410620809675
    .043735029256973465
    .04518620438567554
    .046665086336880095
    .04817182422688942
    .04970656598412723
    .05126945837404324
    .052860647023180246
    .05448027644244237
    .05612849004960009
    .05780543019106723
    .0595112381629812
    .06124605423161761
    .06301001765316767
    .06480326669290577
    .06662593864377289
    .06847816984440017
    .07036009569659588
    .07227185068231748
    .07421356838014963
    .07618538148130785
    .07818742180518633
    .08021982031446832
    .0822827071298148
    .08437621154414882
    .08650046203654976
    .08865558628577294
    .09084171118340768
    .09305896284668745
    .0953074666309647
    .09758734714186246
    .09989872824711389
    .10224173308810132
    .10461648409110419
    .10702310297826761
    .10946171077829933
    .1119324278369056
    .11443537382697373
    .11697066775851084
    .11953842798834562
    .12213877222960187
    .12477181756095049
    .12743768043564743
    .1301364766903643
    .13286832155381798
    .13563332965520566
    .13843161503245183
    .14126329114027164
    .14412847085805777
    .14702726649759498
    .14995978981060856
    .15292615199615017
    .1559264637078274
    .1589608350608804
    .162029375639111
    .1651321945016676
    .16826940018969075
    .1714411007328226
    .17464740365558504
    .17788841598362912
    .18116424424986022
    .184474994500441
    .18782077230067787
    .19120168274079138
    .1946178304415758
    .19806931955994886
    .20155625379439707
    .20507873639031693
    .20863687014525575
    .21223075741405523
    .21586050011389926
    .2195261997292692
    .2232279573168085
    .22696587351009836
    .23074004852434915
    .23455058216100522
    .238397573812271
    .24228112246555486
    .24620132670783548
    .25015828472995344
    .25415209433082675
    .2581828529215958
    .26225065752969623
    .26635560480286247
    .2704977910130658
    .27467731206038465
    .2788942634768104
    .2831487404299921
    .2874408377269175
    .29177064981753587
    .2961382707983211
    .3005437944157765
    .3049873140698863
    .30946892281750854
    .31398871337571754
    .31854677812509186
    .32314320911295075
    .3277780980565422
    .33245153634617935
    .33716361504833037
    .3419144249086609
    .3467040563550296
    .35153259950043936
    .3564001441459435
    .3613067797835095
    .3662525955988395
    .3712376804741491
    .3762621229909065
    .38132601143253014
    .386429433787049
    .39157247774972326
    .39675523072562685
    .4019777798321958
    .4072402119017367
    .41254261348390375
    .4178850708481375
    .4232676699860717
    .4286904966139066
    .43415363617474895
    .4396571738409188
    .44520119451622786
    .45078578283822346
    .45641102318040466
    .4620769996544071
    .467783796112159
    .47353149614800955
    .4793201831008268
    .4851499400560704
    .4910208498478356
    .4969329950608704
    .5028864580325687
    .5088813208549338
    .5149176653765214
    .5209955732043543
    .5271151257058131
    .5332764040105052
    .5394794890121072
    .5457244613701866
    .5520114015120001
    .5583403896342679
    .5647115057049292
    .5711248294648731
    .5775804404296506
    .5840784178911641
    .5906188409193369
    .5972017883637634
    .6038273388553378
    .6104955708078648
    .6172065624196511
    .6239603916750761
    .6307571363461468
    .6375968739940326
    .6444796819705821
    .6514056374198242
    .6583748172794485
    .665387298282272
    .6724431569576875
    .6795424696330938
    .6866853124353135
    .6938717612919899
    .7011018919329731
    .7083757798916868
    .7156935005064807
    .7230551289219693
    .7304607400903537
    .7379104087727308
    .7454042095403874
    .7529422167760779
    .7605245046752924
    .768151147247507
    .7758222183174236
    .7835377915261935
    .7912979403326302
    .799102738014409
    .8069522576692516
    .8148465722161012
    .8227857543962835
    .8307698767746546
    .83879901174074
    .846873231509858
    .8549926081242338
    .8631572134541023
    .8713671191987972
    .8796223968878317
    .8879231178819663
    .8962693533742664
    .9046611743911496
    .9130986517934192
    .9215818562772946
    .9301108583754237
    .938685728457888
    .9473065367331999
    .9559733532492861
    .9646862478944651
    .9734452903984125
    .9822505503331171
    .9911020971138298
    1
);

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark".
// Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
$wcag-min-contrast-ratio: 7 !default;
$wcag-dark: black !default;
$wcag-light: white !default;

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-luminance( $color ) {
    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );
    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );
    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-contrast-ratio( $background, $foreground ) {
    // sass-lint:disable-block variable-name-format
    $backLum: k-color-luminance( $background ) + .05;
    $foreLum: k-color-luminance( $foreground ) + .05;

    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );
}

@function k-is-dark( $color ) {
    @return if( k-color-luminance( $color ) < .5, true, false );
}
@function k-is-light( $color ) {
    @return if( k-color-luminance( $color ) < .5, false, true );
}


// Contrast functions
@function k-contrast-color( $background, $dark: $wcag-dark, $light: $wcag-light, $min-ratio: $wcag-min-contrast-ratio ) {
    $foregrounds: $light, $dark, #ffffff, #000000;
    $max-ratio: 0;
    $max-ratio-color: null;

    @each $color in $foregrounds {
        $contrast-ratio: k-color-contrast-ratio( $background, $color );

        @if ( $contrast-ratio > $min-ratio ) {
            @return $color;
        } @else if ( $contrast-ratio > $max-ratio ) {
            $max-ratio: $contrast-ratio;
            $max-ratio-color: $color;
        }
    }

    // sass-lint:disable-block no-warn
    @warn "Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...";

    @return $max-ratio-color;
}


// Legacy functions
@function k-yiq-luma-information($color) {
    $r: k-color-red($color);
    $g: k-color-green($color);
    $b: k-color-blue($color);

    $yiq: k-math-div( (($r * 299) + ($g * 587) + ($b * 114)), 1000 );

    @return $yiq;
}
@function k-contrast-yiq($color, $dark: $yiq-dark, $light: $yiq-light) {
    $yiq: k-yiq-luma-information($color);
    $out: if($yiq >= $yiq-threshold, $dark, $light);
    // @debug yiq;
    @return $out;
}
@function k-contrast-legacy($color, $dark: $wcag-dark, $light: $wcag-light) {
    $luma: k-color-luminance($color);
    $out: if($luma < .5, $light, $dark);
    // @debug $luma;
    @return $out;
}

// #endregion
// #region @import "./_color-manipulation.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_color-manipulation.import.scss
/// Set a specific jump point for requesting color jumps
/// @group color-system
/// @access private
$kendo-color-level-step: 8% !default;

@function k-color-level( $color, $level: 0 ) {

    @if ( $level == 0 ) or ( $level == 0% ) {
        @return $color;
    }

    $base: if( $level < 0, #ffffff, #000000 );
    $level: k-math-abs( $level );


    @if ( k-math-unit($level) == "%" ) {
        @return k-color-mix( $base, $color, $level );
    }

    @return k-color-mix( $base, $color, $level * $kendo-color-level-step );
}

@function k-color-tint( $color, $level: 1 ) {
    @return k-color-level( $color, -$level );
}
@function k-color-shade( $color, $level: 1 ) {
    @return k-color-level( $color, $level );
}

@function k-try-shade( $color, $level: 1 ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-tint( $color, $level );
    }

    @return k-color-shade( $color, $level );
}
@function k-try-tint( $color, $level: 1 ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-shade( $color, $level );
    }

    @return k-color-tint( $color, $level );
}


@function k-try-darken( $color, $amount ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-lighten( $color, $amount );
    }
    @return k-color-darken( $color, $amount );
}

@function k-try-lighten( $color, $amount ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-darken( $color, $amount );
    }
    @return k-color-lighten( $color, $amount );
}

@function k-rgba-to-mix( $color, $bg ) {
    $percent: k-color-alpha( $color ) * 100%;

    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );
}

// TODO: Remove this function or rethink the logic
@function k-true-mix( $color1, $color2, $weight: 50% ) {
    @return k-color-mix( rgba( $color1, 1 ), rgba( $color2, 1 ), $weight );
}

// #endregion
// #region @import "./_custom-properties.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_custom-properties.import.scss
@function k-var( $prefix: kendo-, $var: null, $fallback: null ) {
    $_prefix: $prefix;
    $_var: $var;
    $_fallback: $fallback;

    @if ( k-string-index( $prefix, "--" ) == 1 ) {
        $_prefix: "";
        $_var: k-string-slice( $prefix, 3 );
        $_fallback: $var;
    }

    @if not $_var {
        @return null;
    }

    @if $_prefix == null {
        $_prefix: "";
    }

    @if ($_fallback != null and $_fallback != "") {
        @return var( --#{$_prefix}#{$_var}, #{$_fallback} );
    }

    @return var( --#{$_prefix}#{$_var} );
}

@function k-vars( $prefix: kendo-, $vars... ) {
    $vars: k-list-reverse( $vars );
    $result: null;

    // @debug $prefix;
    @each $var in $vars {
        $result: k-var( $prefix, $var, $result );
    }

    @return $result;
}

// #endregion
// #region @import "./_escape-string.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_escape-string.import.scss
$_kendo-svg-escaped-characters: (
    ("%", "%25"),
    ("<", "%3c"),
    (">", "%3e"),
    ("#", "%23"),
    ("(", "%28"),
    (")", "%29")
) !default;

// See https://codepen.io/kevinweber/pen/dXWoRw
@function k-escape-svg($string) {
    @if k-string-index($string, "data:image/svg+xml") {
        @each $char, $encoded in $_kendo-svg-escaped-characters {
            // Do not escape the url brackets
            @if k-string-index($string, "url(") == 1 {
                $string: url("#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: k-string-replace($string, $char, $encoded);
            }
        }
    }

    @return $string;
}



$_kendo-escape-class-name: (
    ".": "\\.",
    "/": "\\/"
);

@function k-escape-class-name( $text ) {
    $_text: $text;

    @each $char, $rep in $_kendo-escape-class-name {
        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );
    }

    @return $_text;
}

// #endregion
// #region @import "./_lang.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_lang.import.scss
@function k-if-var( $var, $fallback ) {
    @return if( $var != null, $var, $fallback );
}

// #endregion
// #region @import "./_list.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_list.import.scss
@function k-list-append( $list, $val, $separator: auto ) {
    @return append( $list, $val, $separator );
}

@function k-list-includes( $list, $value ) {
    @return k-list-index( $list, $value ) != null;
}

@function k-list-index( $list, $value ) {
    @return index( $list, $value );
}

@function k-list-is-bracketed( $list ) {
    @return is-bracketed( $list );
}

@function k-list-join( $list1, $list2, $separator: auto, $bracketed: auto ) {
    @return join( $list1, $list2, $separator, $bracketed );
}

@function k-list-length( $list ) {
    @return length( $list );
}

@function k-list-nth( $list, $n ) {
    @return nth( $list, $n );
}

@function k-list-reverse( $list: null ) {
    $result: ();

    @if ($list) {
        $len: k-list-length( $list );

        @for $i from $len through 1 {
            $result: k-list-append( $result, k-list-nth( $list, $i ) );
        }

        @return $result;
    }

    // sass-lint:disable-block no-warn
    @warn "No list passed.";
    @return $result;
}

@function k-list-separator( $list ) {
    @return list-separator( $list );
}

@function k-list-set-nth( $list, $n, $value ) {
    @return set-nth( $list, $n, $value );
}

@function k-list-zip( $lists... ) {
    @return zip( $lists... );
}

// #endregion
// #region @import "./_math.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_math.import.scss
@function k-math-abs( $number ) {
    @return abs( $number );
}

@function k-math-ceil( $number ) {
    @return ceil( $number );
}

@function k-math-clamp( $value, $min, $max ) {
    @return k-math-max( $min, k-math-min( $max, $value ) );
}

@function k-math-compatible( $a, $b ) {
    @return comparable( $a, $b );
}

@function k-math-div( $a, $b )  {
    @return ( $a / $b );
}

@function k-math-is-unitless( $number ) {
    @return unitless( $number );
}

@function k-math-max( $a, $b ) {
    @return max( $a, $b );
}

@function k-math-min( $a, $b ) {
    @return min( $a, $b );
}

@function k-math-mod( $a, $b ) {
    @return ( $a % $b );
}

@function k-math-mul( $a, $b ) {
    @return ( $a * $b );
}

@function k-math-percentage( $number ) {
    @return ( $number * 100% );
}

@function k-math-pow( $x, $n ) {
    $ret: 1;

    @if ( $n == 0 ) {
        @return $ret;
    }

    @if ( $n > 0 ) {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
        @return $ret;
    }

    @for $i from $n to 0 {
        $ret: k-math-div( $ret, $x );
    }
    @return $ret;

}

@function k-math-percentage( $number ) {
    @return percentage( $number );
}

@function k-math-random( $limit: null ) {
    @if ( $limit == null ) {
        @return random();
    }

    @return random( $limit );
}

@function k-math-round( $number, $precision: 0 ) {

    @if ( $precision == 0 ) {
        @return round( $number );
    }

    $pow: k-math-pow( 10, $precision );

    @return k-math-div( round( $number * $pow ), $pow );
}

@function k-math-unit( $number ) {
    @return unit( $number );
}

@function k-math-strip-unit($number) {
    @if ( k-meta-type-of( $number ) == "number" ) and not k-math-is-unitless( $number ) {
        @return k-math-div( $number, 1 * k-math-unit( $number) );
    }

    @return $number;
}

// #endregion
// #region @import "./_map.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_map.import.scss
@function k-map-get( $map, $keys... ) {
    @each $key in $keys {
        $map: map-get( $map, $key );
    }
    @return $map;
}

@function k-map-has-key( $map, $key ) {
    @return map-has-key( $map, $key );
}

@function k-map-keys( $map ) {
    @return map-keys( $map );
}

@function k-map-merge( $map, $args... ) {
    @each $arg in $args {
        $map: map-merge( $map, $arg );
    }
    @return $map;
}

@function k-map-remove( $map, $keys... ) {
    @return map-remove( $map, $keys... );
}

@function k-map-set( $map, $key, $value ) {
    @return k-map-merge( $map, ( $key: $value ) );
}

@function k-map-values( $map ) {
    @return map-values( $map );
}

// #endregion
// #region @import "./_meta.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_meta.import.scss
// Adapted from https://css-tricks.com/snippets/sass/advanced-type-checking/

@function k-meta-call( $function, $args... ) {
    @return call( $function, $args... );
}

@function k-meta-function-exists( $name ) {
    @return function-exists( $name );
}

@function k-meta-get-function( $name, $args... ) {
    @return get-function( $name, $args... );
}

@function k-meta-inspect( $value ) {
    @return inspect( $value );
}

@function k-meta-keywords( $args ) {
    @return keywords( $args );
}

@function k-meta-type-of( $value ) {
    @return type-of( $value );
}

@function k-meta-variable-exists( $name ) {
    @return variable-exists( $name );
}

@function k-meta-is-number( $value ) {
    @return k-meta-type-of( $value ) == "number";
}

@function k-meta-is-integer( $value ) {
    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;
}

@function k-meta-is-time( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "ms" "s", k-math-unit( $value ) ) != null;
}

@function k-meta-is-duration( $value ) {
    @return k-meta-is-time( $value );
}

@function k-meta-is-angle( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "deg" "rad" "grad" "turn", k-math-unit( $value ) ) != null;
}

@function k-meta-is-frequency( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "Hz" "kHz", k-math-unit( $value ) ) != null;
}

@function k-meta-is-relative-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", k-math-unit( $value ) ) != null;
}

@function k-meta-is-absolute-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "cm" "mm" "in" "px" "pt" "pc", k-math-unit( $value ) ) != null;
}

@function k-meta-is-percentage( $value ) {
    @return k-meta-is-number( $value ) and k-math-unit( $value ) == "%";
}

@function k-meta-is-length( $value ) {
    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );
}

@function k-meta-is-resolution( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "dpi" "dpcm" "dppx", k-math-unit( $value ) ) != null;
}

@function k-meta-is-position( $value ) {
    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( "top" "right" "bottom" "left" "center", $value ) != null;
}

// #endregion
// #region @import "./_string.import.scss"; -> packages/utils/node_modules/@progress/kendo-theme-core/scss/functions/_string.import.scss
@function k-string-index( $string, $substring ) {
    @return str-index( $string, $substring );
}

@function k-string-insert( $string, $insert, $index ) {
    @return str-insert( $string, $insert, $index );
}

@function k-string-length( $string ) {
    @return str-length( $string );
}

@function k-string-quote( $string ) {
    @return quote( $string );
}

// See https://www.sassmeister.com/gist/1b4f2da5527830088e4d
@function k-string-replace( $string, $search, $replace: "" ) {
    @if k-meta-type-of( $string ) == number {
        $string: $string + "";
    }

    $index: k-string-index( $string, $search );

    @if $index {
        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );
    }

    @return $string;
}

@function k-string-slice( $string, $start-at, $end-at: -1 ) {
    @return str-slice( $string, $start-at, $end-at );
}

@function k-string-to-lower-case( $string ) {
    @return to-lower-case( $string );
}

@function k-string-to-upper-case( $string ) {
    @return to-upper-case( $string );
}

@function k-string-unique-id() {
    @return unique-id();
}

@function k-string-unquote( $string ) {
    @return unquote( $string );
}

// #endregion

// #endregion

// #endregion
// #region @import "./_variables.scss"; -> packages/utils/scss/_variables.scss
$kendo-prefix: k- !default;
$kendo-important: true !default;

$kendo-theme-colors: () !default;

$kendo-font-sizes: () !default;

$kendo-spacing: (
    // sass-lint:disable-block leading-zero
    0: 0,
    1px: 1px,
    0.5: .125rem,
    1: .25rem,
    1.5: .375rem,
    2: .5rem,
    2.5: .625rem,
    3: .75rem,
    3.5: .875rem,
    4: 1rem,
    4.5: 1.125rem,
    5: 1.25rem,
    5.5: 1.375rem,
    6: 1.5rem,
    6.5: 1.625rem,
    7: 1.75rem,
    7.5: 1.875rem,
    8: 2rem,
    9: 2.25rem,
    10: 2.5rem,
    11: 2.75rem,
    12: 3rem,
    13: 3.25rem,
    14: 3.5rem,
    15: 3.75rem,
    16: 4rem,
    17: 4.25rem,
    18: 4.5rem,
    19: 4.75rem,
    20: 5rem,
    21: 5.25rem,
    22: 5.5rem,
    23: 5.75rem,
    24: 6rem
) !default;

$kendo-sizing: k-map-merge( $kendo-spacing, (
    // sass-lint:disable-block indentation
    "auto": auto,
    "1/2": 50%,
    "1/3": 33.333333%,
    "2/3": 66.666667%,
    "1/4": 25%,
    "2/4": 50%,
    "3/4": 75%,
    "1/5": 20%,
    "2/5": 40%,
    "3/5": 60%,
    "4/5": 80%,
    "1/6": 16.666667%,
    "2/6": 33.333333%,
    "3/6": 50%,
    "4/6": 66.666667%,
    "5/6": 83.333333%,
    "1/12": 8.333333%,
    "2/12": 16.666667%,
    "3/12": 25%,
    "4/12": 33.333333%,
    "5/12": 41.666667%,
    "6/12": 50%,
    "7/12": 58.333333%,
    "8/12": 66.666667%,
    "9/12": 75%,
    "10/12": 83.333333%,
    "11/12": 91.666667%,
    "full": 100%,
    "min": min-content,
    "max": max-content,
    "fit": fit-content
)) !default;

$kendo-border-radii: (
    DEFAULT: .25rem,
    0: 0,
    sm: .125rem,
    md: .25rem,
    lg: .5rem,
    full: 9999px
) !default;

//

$kendo-utils: (

    // Accessibility
    "screen-readers": true,

    // Layout
    "aspect-ratio": (
        auto: auto,
        1: 1,
        square: k-string-unquote("1 / 1"),
        video: k-string-unquote("16 / 9")
    ),
    "container": (),
    "columns": (),
    "break-after": (),
    "break-before": (),
    "break-inside": (),
    "box-decoration-break": (),
    "box-sizing": (),
    "display": (
        none,
        block,
        inline,
        inline-block,
        flex,
        inline-flex,
        grid,
        inline-grid,
        table,
        inline-table,
        list-item
    ),
    "float": (
        left,
        right,
        none
    ),
    "clear": (
        left,
        right,
        both,
        none
    ),
    "isolation": (),
    "object-fit": (),
    "object-position": (),
    "overflow": (
        auto: auto,
        hidden: hidden,
        visible: visible,
        scroll: scroll,
        clip: clip,
        x-auto: auto,
        x-hidden: hidden,
        x-visible: visible,
        x-scroll: scroll,
        x-clip: clip,
        y-auto: auto,
        y-hidden: hidden,
        y-visible: visible,
        y-scroll: scroll,
        y-clip: clip
    ),
    "overscroll": (),
    "position": (
        static,
        relative,
        absolute,
        fixed,
        sticky
    ),
    "inset": (
        0: 0,
        1: 1px,
        -1: -1px
    ),
    "visibility": (
        visible,
        hidden
    ),
    "zindex": (
        0: 0,
        10: 10,
        20: 20,
        30: 30,
        40: 40,
        50: 50,
        auto: auto
    ),

    // Flex / Grid
    "flex-direction": (
        row: row,
        row-reverse: row-reverse,
        col: column,
        col-reverse: column-reverse
    ),
    "flex-wrap": (
        wrap,
        wrap-reverse,
        nowrap
    ),
    "flex": (
        1: 1 1 0%,
        auto: 1 1 auto,
        initial: 0 1 auto,
        none: none
    ),
    "flex-grow": (
        DEFAULT: 1,
        0: 0
    ),
    "flex-shrink": (
        DEFAULT: 1,
        0: 0
    ),
    "flex-basis": $kendo-sizing,
    "order": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        first: -9999,
        last: 9999,
        none: 0
    ),
    "grid-template-columns": (
        1: repeat( 1, minmax( 0, 1fr ) ),
        2: repeat( 2, minmax( 0, 1fr ) ),
        3: repeat( 3, minmax( 0, 1fr ) ),
        4: repeat( 4, minmax( 0, 1fr ) ),
        5: repeat( 5, minmax( 0, 1fr ) ),
        6: repeat( 6, minmax( 0, 1fr ) ),
        7: repeat( 7, minmax( 0, 1fr ) ),
        8: repeat( 8, minmax( 0, 1fr ) ),
        9: repeat( 9, minmax( 0, 1fr ) ),
        10: repeat( 10, minmax( 0, 1fr ) ),
        11: repeat( 11, minmax( 0, 1fr ) ),
        12: repeat( 12, minmax( 0, 1fr ) ),
        none: none
    ),
    "grid-template-rows": (
        1: repeat( 1, minmax( 0, 1fr ) ),
        2: repeat( 2, minmax( 0, 1fr ) ),
        3: repeat( 3, minmax( 0, 1fr ) ),
        4: repeat( 4, minmax( 0, 1fr ) ),
        5: repeat( 5, minmax( 0, 1fr ) ),
        6: repeat( 6, minmax( 0, 1fr ) ),
        7: repeat( 7, minmax( 0, 1fr ) ),
        8: repeat( 8, minmax( 0, 1fr ) ),
        9: repeat( 9, minmax( 0, 1fr ) ),
        10: repeat( 10, minmax( 0, 1fr ) ),
        11: repeat( 11, minmax( 0, 1fr ) ),
        12: repeat( 12, minmax( 0, 1fr ) ),
        none: none
    ),
    "grid-column-start": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-column-end": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-column-span": (
        1: span 1 / span 1,
        2: span 2 / span 2,
        3: span 3 / span 3,
        4: span 4 / span 4,
        5: span 5 / span 5,
        6: span 6 / span 6,
        7: span 7 / span 7,
        8: span 8 / span 8,
        9: span 9 / span 9,
        10: span 10 / span 10,
        11: span 11 / span 11,
        12: span 12 / span 12,
        full: k-string-unquote("1 / -1"),
        auto: auto
    ),
    "grid-row-start": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-row-end": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-row-span": (
        1: span 1 / span 1,
        2: span 2 / span 2,
        3: span 3 / span 3,
        4: span 4 / span 4,
        5: span 5 / span 5,
        6: span 6 / span 6,
        7: span 7 / span 7,
        8: span 8 / span 8,
        9: span 9 / span 9,
        10: span 10 / span 10,
        11: span 11 / span 11,
        12: span 12 / span 12,
        full: span 1 / span -1,
        auto: auto
    ),
    "grid-auto-flow": (
        row: row,
        col: column,
        row-dense: row dense,
        col-dense: column dense,
        unset: unset
    ),
    "grid-auto-columns": (
        auto: auto,
        min: min-content,
        max: max-content,
        fr: minmax( 0, 1fr ),
    ),
    "grid-auto-rows": (
        auto: auto,
        min: min-content,
        max: max-content,
        fr: minmax( 0, 1fr ),
    ),
    "gap": k-map-merge( $kendo-spacing, (
        // sass-lint:disable-block indentation
        // TODO: remove this extension once we fix docs
        xs: k-map-get( $kendo-spacing, 1 ),
        sm: k-map-get( $kendo-spacing, 2 ),
        md: k-map-get( $kendo-spacing, 3 ),
        lg: k-map-get( $kendo-spacing, 4 ),
        xl: k-map-get( $kendo-spacing, 6 ),
        thin: k-map-get( $kendo-spacing, 0.5 ), // sass-lint:disable-line leading-zero
        hair: k-map-get( $kendo-spacing, 1px )
    )),
    "align-content": (
        normal: normal,
        stretch: stretch,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly
    ),
    "align-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "align-self": (
        auto: auto,
        normal: normal,
        stretch: stretch,
        start: flex-start,
        end: flex-end,
        center: center
    ),
    "justify-content": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
        stretch: stretch
    ),
    "justify-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "justify-self": (
        auto: auto,
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "place-content": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
        stretch: stretch
    ),
    "place-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "place-self": (
        auto: auto,
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),

    // Spacing
    "margin": k-map-merge( $kendo-spacing, (
        // sass-lint:disable-block indentation
        // TODO: remove this extension once we fix docs
        xs: k-map-get( $kendo-spacing, 1 ),
        sm: k-map-get( $kendo-spacing, 2 ),
        md: k-map-get( $kendo-spacing, 3 ),
        lg: k-map-get( $kendo-spacing, 4 ),
        xl: k-map-get( $kendo-spacing, 6 ),
        thin: k-map-get( $kendo-spacing, 0.5 ), // sass-lint:disable-line leading-zero
        hair: k-map-get( $kendo-spacing, 1px )
    )),
    "padding": k-map-merge( $kendo-spacing, (
        // sass-lint:disable-block indentation
        // TODO: remove this extension once we fix docs
        xs: k-map-get( $kendo-spacing, 1 ),
        sm: k-map-get( $kendo-spacing, 2 ),
        md: k-map-get( $kendo-spacing, 3 ),
        lg: k-map-get( $kendo-spacing, 4 ),
        xl: k-map-get( $kendo-spacing, 6 ),
        thin: k-map-get( $kendo-spacing, 0.5 ), // sass-lint:disable-line leading-zero
        hair: k-map-get( $kendo-spacing, 1px )
    )),
    "space-between": (),

    // Sizing
    "width": k-map-merge( $kendo-sizing, (
        // sass-lint:disable-block indentation
        screen: 100vw
    )),
    "min-width": (
        0: 0,
        full: 100%,
        screen: 100vw,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "max-width": (
        none: none,
        0: 0,
        full: 100%,
        screen: 100vw,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "height": k-map-merge( $kendo-sizing, (
        // sass-lint:disable-block indentation
        screen: 100vh
    )),
    "min-height": (
        0: 0,
        full: 100%,
        screen: 100vh,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "max-height": (
        none: none,
        0: 0,
        full: 100%,
        screen: 100vh,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),

    // Typography
    "font-family": (),
    "font-size": $kendo-font-sizes,
    "font-smoothing": (),
    "font-style": (
        italic: italic,
        non-italic: normal
    ),
    "font-weight": (
        "thin": 100,
        "extralight": 200,
        "light": 300,
        "normal": 400,
        "medium": 500,
        "semibold": 600,
        "bold": 700,
        "extrabold": 800,
        "black": 900
    ),
    "font-variant-numeric": (),
    "letter-spacing": (),
    "line-height": (),
    "list-style-type": (),
    "list-style-position": (),
    "text-align": (
        left,
        right,
        center,
        justify
    ),
    "text-color": k-map-merge( $kendo-theme-colors, (
        // sass-lint:disable-block indentation
        "inherit": inherit,
        "current": currentColor,
        "transparent": transparent,
        "black": black,
        "white": white
    )),
    "text-decoration": (),
    "text-decoration-width": (),
    "text-decoration-style": (),
    "text-decoration-color": (),
    "text-decoration-offset": (),
    "text-transform": (
        uppercase: uppercase,
        lowercase: lowercase,
        capitalize: capitalize,
        normal-case: none
    ),
    "text-overflow": (),
    "text-indent": (),
    "vertical-align": (),
    "white-space": (
        normal,
        nowrap,
        pre,
        pre-line,
        pre-wrap,
        break-spaces
    ),
    "word-break": (),

    // Background
    "background-color": k-map-merge( $kendo-theme-colors, (
        // sass-lint:disable-block indentation
        "inherit": inherit,
        "transparent": transparent,
        "black": black,
        "white": white
    )),

    // Border
    "border-width": (
        DEFAULT: 1px,
        0: 0,
        2: 2px,
        4: 4px,
        8: 8px
    ),
    "border-style": (
        solid,
        dashed,
        dotted,
        double,
        hidden,
        none
    ),
    "border-color": k-map-merge( $kendo-theme-colors, (
        // sass-lint:disable-block indentation
        "inherit": inherit,
        "current": currentColor,
        "transparent": transparent,
        "black": black,
        "white": white
    )),
    "border-radius": $kendo-border-radii,
    "outline-width": (
        DEFAULT: 1px,
        0: 0,
        2: 2px,
        4: 4px,
        8: 8px
    ),
    "outline-style": (
        solid,
        dashed,
        dotted,
        double,
        groove,
        ridge,
        inset,
        outset,
        none
    ),
    "outline-color": (),
    "outline-offset": (
        0: 0,
        1: 1px,
        2: 2px,
        4: 4px,
        8: 8px
    ),

    // Effects

    // Filter

    // Table
    "border-collapse": (
        collapse,
        separate
    ),
    "table-layout": (
        auto,
        fixed
    ),

    // Transition

    // Transform
    "flip": true,
    "scale": (
        // sass-lint:disable-block leading-zero
        0: 0,
        0.25: .25,
        0.5: .5,
        0.75: .75,
        1: 1,
        1.25: 1.25,
        1.5: 1.5,
        2: 2
    ),
    "rotate": (
        0: 0deg,
        45: 45deg,
        90: 90deg,
        135: 135deg,
        180: 180deg,
        225: 225deg,
        270: 270deg,
        315: 315deg
    ),
    "translate": k-map-remove( $kendo-sizing, "auto", "min", "max", "fit" ),
    "skew": (
        0: 0deg,
        1: 1deg,
        2: 2deg,
        3: 3deg,
        4: 4deg,
        5: 5deg,
        6: 6deg,
        7: 7deg,
        8: 8deg,
        9: 9deg,
        10: 10deg,
        11: 11deg,
        12: 12deg
    ),
    "origin": (
        center: center,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        top-left: top left,
        top-right: top right,
        bottom-left: bottom left,
        bottom-right: bottom right
    ),


    // Interactivity
    "accent-color": (),
    "appearance": (
        none,
        auto
    ),
    "cursor": (
        none,
        auto,
        default,
        context-menu,
        help,
        pointer,
        progress,
        wait,
        cell,
        crosshair,
        text,
        vertical-text,
        alias,
        copy,
        move,
        no-drop,
        not-allowed,
        e-resize,
        n-resize,
        ne-resize,
        nw-resize,
        s-resize,
        se-resize,
        sw-resize,
        w-resize,
        ew-resize,
        ns-resize,
        nesw-resize,
        nwse-resize,
        col-resize,
        row-resize,
        all-scroll,
        zoom-in,
        zoom-out,
        grab,
        grabbing
    ),
    "caret-color": (),
    "pointer-events": (
        none,
        auto
    ),
    "resize": (
        DEFAULT: both,
        none: none,
        x: horizontal,
        y: vertical
    ),
    "scroll-behavior": (
        auto,
        smooth
    ),
    "scroll-snap-type": (
        none: none,
        snap-x: x var(--#{$kendo-prefix}scroll-snap-strictness),
        snap-y: y var(--#{$kendo-prefix}scroll-snap-strictness),
        snap-both: both var(--#{$kendo-prefix}scroll-snap-strictness)
    ),
    "scroll-snap-align": (
        start,
        end,
        center,
        none
    ),
    "scroll-snap-stop": (
        normal,
        always
    ),
    "scroll-margin": $kendo-spacing,
    "scroll-padding": $kendo-spacing,
    "touch-action": (
        none,
        auto,
        pan-x,
        pan-left,
        pan-right,
        pan-y,
        pan-up,
        pan-down,
        pinch-zoom,
        manipulation
    ),
    "user-select": (
        none,
        auto,
        text,
        all,
        contain
    ),
    "will-change": (
        auto: auto,
        scroll: scroll-position,
        contents: contents,
        transform: transform
    )
) !default;

// #endregion
// #region @import "./_mixins.scss"; -> packages/utils/scss/_mixins.scss
@mixin generate-utils( $name, $props, $values, $function: "", $important: $kendo-important ) {
    @if $values {
        $_props: if( k-meta-type-of($props) == list, $props, ( $props ) );
        $_fn: if( k-meta-function-exists( $function ), k-meta-get-function( $function ), null );

        @each $key, $val in $values {
            $_key: k-escape-class-name( $key );
            $_val: if( k-meta-type-of($values) == list, $key, $val );
            $_name: k-escape-class-name( $name );
            $_selector: if( $_key == DEFAULT, #{$kendo-prefix}#{$_name}, #{$kendo-prefix}#{$_name}-#{$_key});

            @if $important != only {
                .#{$_selector} {
                    @each $prop in $_props {
                        #{$prop}: if( $_fn, k-meta-call($_fn, $_val), $_val );
                    }
                }
            }
            @if $important {
                .\!#{$_selector} {
                    @each $prop in $_props {
                        #{$prop}:  if( $_fn, k-meta-call($_fn, $_val), $_val ) !important; // sass-lint:disable-line no-important
                    }
                }
            }
        }
    }
}

// #endregion

// #region @import "./accessibility/index.import.scss"; -> packages/utils/scss/accessibility/index.import.scss
// #region @import "./_screen-readers.scss"; -> packages/utils/scss/accessibility/_screen-readers.scss
@mixin kendo-utils--accessibility--screen-readers() {

    // Screen readers utility classes
    $kendo-utils-accessibility: k-map-get( $kendo-utils, "accessibility" ) !default;

    @if $kendo-utils-accessibility {
        /// This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.
        /// @name .k-sr-only
        /// @group accessibility
        .#{$kendo-prefix}sr-only {
            margin: -1px;
            padding: 0;
            width: 1px;
            height: 1px;
            border-width: 0;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            position: absolute;
        }

        .#{$kendo-prefix}not-sr-only {
            margin: 0;
            padding: 0;
            width: auto;
            height: auto;
            border-width: 0;
            overflow: visible;
            clip: auto;
            position: static;
        }
    }

}

// #endregion

@mixin kendo-utils--accessibility() {
    @include kendo-utils--accessibility--screen-readers();
}

// #endregion
// #region @import "./layout/index.import.scss"; -> packages/utils/scss/layout/index.import.scss
// #region @import "./_aspect-ratio.scss"; -> packages/utils/scss/layout/_aspect-ratio.scss
// Aspect-ratio documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio.

/// This is equivalent to `aspect-ratio: auto;`. Replaced elements with an intrinsic aspect ratio use that aspect ratio, otherwise the box has no preferred aspect ratio. Size calculations involving intrinsic aspect ratio always work with the content box dimensions.
/// @name .k-aspect-ratio-auto
/// @group aspect-ratio
/// @contextType css

/// This is equivalent to `aspect-ratio: 1;`. The box's preferred aspect ratio is the specified ratio of 1. Size calculations involving preferred aspect ratio work with the dimensions of the box specified by box-sizing.
/// @name .k-aspect-ratio-1
/// @group aspect-ratio
/// @contextType css

/// This is equivalent to `aspect-ratio: 1 / 1;`. The box's preferred aspect ratio is the specified ratio of 1. Size calculations involving preferred aspect ratio work with the dimensions of the box specified by box-sizing.
/// @name .k-aspect-ratio-square
/// @group aspect-ratio
/// @contextType css

/// This is equivalent to `aspect-ratio: 16 / 9;`. The box's preferred aspect ratio is the specified ratio of 16 : 9. Size calculations involving preferred aspect ratio work with the dimensions of the box specified by box-sizing.
/// @name .k-aspect-ratio-video
/// @group aspect-ratio
/// @contextType css

@mixin kendo-utils--layout--aspect-ratio() {

    // Aspect ratio utility classes
    $kendo-utils-aspect-ratio: k-map-get( $kendo-utils, "aspect-ratio" ) !default;
    @include generate-utils( ratio, aspect-ratio, $kendo-utils-aspect-ratio );


    // Legacy aliases
    @include generate-utils( aspect-ratio, aspect-ratio, $kendo-utils-aspect-ratio );

}

// #endregion
// #region @import "./_clear.scss"; -> packages/utils/scss/layout/_clear.scss
// Clear documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/clear.

/// This is equivalent to `clear: left;`. Is a keyword indicating that the element is moved down to clear past left floats.
/// @name .k-clear-left
/// @group float
/// @contextType css

/// This is equivalent to `clear: right;`. Is a keyword indicating that the element is moved down to clear past right floats.
/// @name .k-clear-right
/// @group float
/// @contextType css

/// This is equivalent to `clear: both;`. Is a keyword indicating that the element is moved down to clear past both left and right floats.
/// @name .k-clear-both
/// @group float
/// @contextType css

/// This is equivalent to `clear: none;`. Is a keyword indicating that the element is not moved down to clear past floating elements.
/// @name .k-clear-none
/// @group float
/// @contextType css

@mixin kendo-utils--layout--clear() {

    // Clear utility classes
    $kendo-utils-clear: k-map-get( $kendo-utils, "clear" ) !default;
    @include generate-utils( clear, clear, $kendo-utils-clear );

}

// #endregion
// #region @import "./_display.scss"; -> packages/utils/scss/layout/_display.scss
/// This is equivalent to `display: none;`. Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.
/// @name .k-d-none
/// @group display
/// @contextType css

/// This is equivalent to `display: block;`. The element generates a block element box, generating line breaks both before and after the element when in the normal flow.
/// @name .k-d-block
/// @group display
/// @contextType css

/// This is equivalent to `display: inline;`. The element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is space.
/// @name .k-d-inline
/// @group display
/// @contextType css

/// This is equivalent to `display: inline-block;`. The element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would).
/// @name .k-d-inline-block
/// @group display
/// @contextType css

/// This is equivalent to `display: flex;`. The element behaves like a block element and lays out its content according to the flexbox model.
/// @name .k-d-flex
/// @group display
/// @contextType css

/// This is equivalent to `display: inline-flex;`. The element behaves like an inline element and lays out its content according to the flexbox model.
/// @name .k-d-inline-flex
/// @group display
/// @contextType css

/// This is equivalent to `display: grid`. It defines the element as a grid container and establishes a new grid formatting context for its contents.
/// @name .k-d-grid
/// @group display
/// @contextType css

/// This is equivalent to `display: inline-grid`. It defines the element as a grid container and establishes a new grid formatting context for its contents.
/// @name .k-d-inline-grid
/// @group display
/// @contextType css

/// This is equivalent to `display: table;`. These elements behave like HTML `<table>` elements. It defines a block-level box.
/// @name .k-d-table
/// @group display
/// @contextType css

/// This is equivalent to `display: inline-table;`. The inline-table value does not have a direct mapping in HTML. It behaves like an HTML `<table>` element, but as an inline box, rather than a block-level box. Inside the table box is a block-level context.
/// @name .k-d-inline-table
/// @group display
/// @contextType css

/// This is equivalent to `display: list-item;`. These elements behave like HTML `<LI>` elements. It defines a block-level box.
/// @name .k-d-list-item
/// @group display
/// @contextType css

@mixin kendo-utils--layout--display() {

    // Display utility classes
    $kendo-utils-display: k-map-get( $kendo-utils, "display" ) !default;
    @include generate-utils( d, display, $kendo-utils-display );


    // Legacy aliases
    @include generate-utils( display, display, $kendo-utils-display );
    .#{$kendo-prefix}d-flex-row { @extend .#{$kendo-prefix}d-flex, .#{$kendo-prefix}flex-row !optional; }
    .\!#{$kendo-prefix}d-flex-row { @extend .\!#{$kendo-prefix}d-flex, .\!#{$kendo-prefix}flex-row !optional; } // sass-lint:disable-line class-name-format
    .#{$kendo-prefix}d-flex-col { @extend .#{$kendo-prefix}d-flex, .#{$kendo-prefix}flex-col !optional; }
    .\!#{$kendo-prefix}d-flex-col { @extend .\!#{$kendo-prefix}d-flex, .\!#{$kendo-prefix}flex-row !optional; } // sass-lint:disable-line class-name-format

}

// #endregion
// #region @import "./_float.scss"; -> packages/utils/scss/layout/_float.scss
// Float documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/float.

/// This is equivalent to `float: left;`. The element must float on the left side of its containing block.
/// @name .k-float-left
/// @group float
/// @contextType css

/// This is equivalent to `float: right;`. The element must float on the right side of its containing block.
/// @name .k-float-right
/// @group float
/// @contextType css

/// This is equivalent to `float: none;`. The element must not float.
/// @name .k-float-none
/// @group float
/// @contextType css

@mixin kendo-utils--layout--float() {

    // Float utility classes
    $kendo-utils-float: k-map-get( $kendo-utils, "float" ) !default;
    @include generate-utils( float, float, $kendo-utils-float );

}

// #endregion
// #region @import "./_overflow.scss"; -> packages/utils/scss/layout/_overflow.scss
/// This is equivalent to `overflow: auto;`. Depends on the user agent. If content fits inside the padding box, it looks the same as visible, but still establishes a new block formatting context. Desktop browsers provide scrollbar if content overflows.
/// @name .k-overflow-auto
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow: hidden;`. Content is clipped if necessary to fit the padding box. No scrollbar is provided, and no support for allowing the user to scroll (such as by dragging or using a scroll wheel) is allowed. The content can be scrolled programmatically (for example, by setting the value of a property such as offsetLeft), so the element is still a scroll container.
/// @name .k-overflow-hidden
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow: visible;`. Content is not clipped and may be rendered outside the padding box.
/// @name .k-overflow-visible
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow: scroll;`. Content is clipped if necessary to fit the padding box. Browsers always display scrollbar whether or not any content is actually clipped, preventing scrollbar from appearing or disappearing as content changes. Printers may still print overflowing content.
/// @name .k-overflow-scroll
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow: clip;`. Like for hidden, the content is clipped to the element's padding box. The difference between clip and hidden is that the clip keyword also forbids all scrolling, including programmatic scrolling.
/// @name .k-overflow-clip
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-x: auto;`.
/// @name .k-overflow-x-auto
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-x: hidden;`.
/// @name .k-overflow-x-hidden
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-x: visible;`.
/// @name .k-overflow-x-visible
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-x: scroll;`.
/// @name .k-overflow-x-scroll
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-x: clip;`.
/// @name .k-overflow-x-clip
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-y: auto;`.
/// @name .k-overflow-y-auto
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-y: hidden;`.
/// @name .k-overflow-y-hidden
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-y: visible;`.
/// @name .k-overflow-y-visible
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-y: scroll;`.
/// @name .k-overflow-y-scroll
/// @group overflow
/// @contextType css

/// This is equivalent to `overflow-y: clip;`.
/// @name .k-overflow-y-clip
/// @group overflow
/// @contextType css

@mixin kendo-utils--layout--overflow() {

    // Overflow utility classes
    $kendo-utils-overflow: k-map-get( $kendo-utils, "overflow" ) !default;
    @include generate-utils( overflow, overflow, $kendo-utils-overflow );

}

// #endregion
// #region @import "./_position.scss"; -> packages/utils/scss/layout/_position.scss
// Position documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/position.

/// This is equivalent to `position: static;`. The element is positioned according to the normal flow of the document. The top, right, bottom, left, and z-index properties have no effect. This is the default value.
/// @name .k-pos-static
/// @group position
/// @contextType css

/// This is equivalent to `position: relative;`. The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static.
/// @name .k-pos-relative
/// @group position
/// @contextType css

/// This is equivalent to `position: absolute;`. The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.
/// @name .k-pos-absolute
/// @group position
/// @contextType css

/// This is equivalent to `position: fixed;`. The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to the initial containing block established by the viewport, except when one of its ancestors has a transform, perspective, or filter property set to something other than none (see the CSS Transforms Spec), in which case that ancestor behaves as the containing block. (Note that there are browser inconsistencies with perspective and filter contributing to containing block formation.) Its final position is determined by the values of top, right, bottom, and left.
/// @name .k-pos-fixed
/// @group position
/// @contextType css

/// This is equivalent to `position: sticky;`. The element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and containing block (nearest block-level ancestor), including table-related elements, based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements.
/// @name .k-pos-sticky
/// @group position
/// @contextType css


// TODO: inset docs


/// This is equivalent to `top: 0;`.
/// @name .k-pos-top
/// @group position
/// @contextType css

/// This is equivalent to `right: 0;`.
/// @name .k-pos-right
/// @group position
/// @contextType css

/// This is equivalent to `bottom: 0;`.
/// @name .k-pos-bottom
/// @group position
/// @contextType css

/// This is equivalent to `left: 0;`.
/// @name .k-pos-left
/// @group position
/// @contextType css

@mixin kendo-utils--layout--position() {

    // Position utility classes
    $kendo-utils-position: k-map-get( $kendo-utils, "position" ) !default;
    @include generate-utils( pos, position, $kendo-utils-position );


    // Legacy aliases
    .#{$kendo-prefix}static { @extend .#{$kendo-prefix}pos-static !optional; }
    .\!#{$kendo-prefix}static { @extend .\!#{$kendo-prefix}pos-static !optional; }
    .#{$kendo-prefix}relative { @extend .#{$kendo-prefix}pos-relative !optional; }
    .\!#{$kendo-prefix}relative { @extend .\!#{$kendo-prefix}pos-relative !optional; }
    .#{$kendo-prefix}absolute { @extend .#{$kendo-prefix}pos-absolute !optional; }
    .\!#{$kendo-prefix}absolute { @extend .\!#{$kendo-prefix}pos-absolute !optional; }
    .#{$kendo-prefix}fixed { @extend .#{$kendo-prefix}pos-fixed !optional; }
    .\!#{$kendo-prefix}fixed { @extend .\!#{$kendo-prefix}pos-fixed !optional; }
    .#{$kendo-prefix}sticky { @extend .#{$kendo-prefix}pos-sticky !optional; }
    .\!#{$kendo-prefix}sticky { @extend .\!#{$kendo-prefix}pos-sticky !optional; }


    // Inset utility classes
    $kendo-utils-inset: k-map-get( $kendo-utils, "inset" ) !default;
    @include generate-utils( inset, inset, $kendo-utils-inset );
    @include generate-utils( inset-x, inset-inline, $kendo-utils-inset );
    @include generate-utils( inset-y, inset-block, $kendo-utils-inset );
    @include generate-utils( top, top, $kendo-utils-inset );
    @include generate-utils( right, right, $kendo-utils-inset );
    @include generate-utils( bottom, bottom, $kendo-utils-inset );
    @include generate-utils( left, left, $kendo-utils-inset );
    @include generate-utils( top-left, ( top, left ), $kendo-utils-inset );
    @include generate-utils( top-right, ( top, right ), $kendo-utils-inset );
    @include generate-utils( bottom-left, ( bottom, left ), $kendo-utils-inset );
    @include generate-utils( bottom-right, ( bottom, right ), $kendo-utils-inset );


    // Legacy aliases
    .#{$kendo-prefix}top-start,
    .#{$kendo-prefix}pos-top-start {
        top: 0;
        inset-inline-start: 0;
    }

    .#{$kendo-prefix}top-end,
    .#{$kendo-prefix}pos-top-end {
        top: 0;
        inset-inline-end: 0;
    }

    .#{$kendo-prefix}bottom-start,
    .#{$kendo-prefix}pos-bottom-start {
        bottom: 0;
        inset-inline-start: 0;
    }

    .#{$kendo-prefix}bottom-end,
    .#{$kendo-prefix}pos-bottom-end {
        bottom: 0;
        inset-inline-end: 0;
    }

    .#{$kendo-prefix}top-center,
    .#{$kendo-prefix}pos-top-center {
        top: 0;
        left: 50%;
        transform: translateX(-50%);
    }
    .#{$kendo-prefix}middle-left,
    .#{$kendo-prefix}middle-start,
    .#{$kendo-prefix}pos-middle-start {
        top: 50%;
        left: 0;
        transform: translateY(-50%);
    }
    .#{$kendo-prefix}middle-center {
        top: 50%;
        left: 50%;
        transform: translateY(-50%);
    }
    .#{$kendo-prefix}middle-right,
    .#{$kendo-prefix}middle-end,
    .#{$kendo-prefix}pos-middle-end {
        top: 50%;
        right: 0;
        transform: translateY(-50%);
    }
    .#{$kendo-prefix}bottom-center,
    .#{$kendo-prefix}pos-bottom-center {
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
    }


    // Position length utility classes
    @each $side in (top, right, bottom, left) {
        .#{$kendo-prefix}#{$side},
        .#{$kendo-prefix}pos-#{$side} { #{$side}: 0; } // sass-lint:disable-line brace-style
    }

}

// #endregion
// #region @import "./_visibility.scss"; -> packages/utils/scss/layout/_visibility.scss
// TODO: docs
// TODO: consider visible and invisible vs visibility-visible and visibility-hidden

@mixin kendo-utils--layout--visibility() {

    // Visibility utility classes
    $kendo-utils-visibility: k-map-get( $kendo-utils, "visibility" ) !default;
    @include generate-utils( visibility, visibility, $kendo-utils-visibility );

    // Legacy aliases
    .#{$kendo-prefix}visible { @extend .#{$kendo-prefix}visibility-visible !optional; }
    .\!#{$kendo-prefix}visible { @extend .\!#{$kendo-prefix}visibility-visible !optional; }
    .#{$kendo-prefix}invisible { @extend .#{$kendo-prefix}visibility-hidden !optional; }
    .\!#{$kendo-prefix}invisible { @extend .\!#{$kendo-prefix}visibility-hidden !optional; }

}

// #endregion
// #region @import "./_zindex.scss"; -> packages/utils/scss/layout/_zindex.scss
// TODO: docs

@mixin kendo-utils--layout--zindex() {

    // Z-index utility classes
    $kendo-utils-zindex: k-map-get( $kendo-utils, "zindex" ) !default;
    @include generate-utils( z, z-index, $kendo-utils-zindex );

}

// #endregion


@mixin kendo-utils--layout() {
    @include kendo-utils--layout--aspect-ratio();
    @include kendo-utils--layout--clear();
    @include kendo-utils--layout--display();
    @include kendo-utils--layout--float();
    @include kendo-utils--layout--overflow();
    @include kendo-utils--layout--position();
    @include kendo-utils--layout--visibility();
    @include kendo-utils--layout--zindex();
}

// #endregion
// #region @import "./flex-grid/index.import.scss"; -> packages/utils/scss/flex-grid/index.import.scss
// #region @import "./_align-content.scss"; -> packages/utils/scss/flex-grid/_align-content.scss
// TODO: docs

@mixin kendo-utils--flex-grid--align-content() {

    // Align content utility classes
    $kendo-utils-align-content: k-map-get( $kendo-utils, "align-content" ) !default;
    @include generate-utils( align-content, align-content, $kendo-utils-align-content );

}

// #endregion
// #region @import "./_align-items.scss"; -> packages/utils/scss/flex-grid/_align-items.scss
// TODO: docs

@mixin kendo-utils--flex-grid--align-items() {

    // Align items utility classes
    $kendo-utils-align-items: k-map-get( $kendo-utils, "align-items" ) !default;
    @include generate-utils( align-items, align-items, $kendo-utils-align-items );

}

// #endregion
// #region @import "./_align-self.scss"; -> packages/utils/scss/flex-grid/_align-self.scss
// TODO: docs

@mixin kendo-utils--flex-grid--align-self() {

    // Align self utility classes
    $kendo-utils-align-self: k-map-get( $kendo-utils, "align-self" ) !default;
    @include generate-utils( align-self, align-self, $kendo-utils-align-self );

}

// #endregion
// #region @import "./_flex-basis.scss"; -> packages/utils/scss/flex-grid/_flex-basis.scss
/// This is equivalent to `flex-basis: auto`. It specifies the initial size of the flex item, before any available space is distributed according to the flex factors. It sizes the element according to its size property.
/// @name .k-flex-basis-auto
/// @group flex-basis
/// @contextType css

/// This is equivalent to `flex-basis: 0`. It specifies the initial size of the flex item, before any available space is distributed according to the flex factors. It disregards the element' size property.
/// @name .k-flex-basis-0
/// @group flex-basis
/// @contextType css

@mixin kendo-utils--flex-grid--flex-basis() {

    // Flex basis utility classes
    $kendo-utils-flex-basis: k-map-get( $kendo-utils, "flex-basis" ) !default;
    @include generate-utils( basis, flex-basis, $kendo-utils-flex-basis );
    @include generate-utils( flex-basis, flex-basis, $kendo-utils-flex-basis );

}

// #endregion
// #region @import "./_flex-direction.scss"; -> packages/utils/scss/flex-grid/_flex-direction.scss
/// This is equivalent to `flex-direction: row`. This establishes the main-axis to be horizontal, thus defining the direction flex items are placed in the flex container: left to right in `ltr`; right to left in `rtl`.
/// @name .k-flex-row
/// @group flex-direction
/// @contextType css

/// This is equivalent to `flex-direction: row-reverse`. This establishes the main-axis to be horizontal, thus defining the direction flex items are placed in the flex container: right to left in `ltr`; left to right in `rtl`.
/// @name .k-flex-row-reverse
/// @group flex-direction
/// @contextType css

/// This is equivalent to `flex-direction: column`. This establishes the main-axis to be vertical, thus defining the direction flex items are placed in the flex container: top to bottom.
/// @name .k-flex-col
/// @group flex-direction
/// @contextType css

/// This is equivalent to `flex-direction: column-reverse`. This establishes the main-axis to be vertical, thus defining the direction flex items are placed in the flex container: bottom to top.
/// @name .k-flex-col-reverse
/// @group flex-direction
/// @contextType css

@mixin kendo-utils--flex-grid--flex-direction() {

    // Flex direction utility classes
    $kendo-utils-flex-direction: k-map-get( $kendo-utils, "flex-direction" ) !default;
    @include generate-utils( flex, flex-direction, $kendo-utils-flex-direction );


    // Legacy aliases
    .#{$kendo-prefix}flex-column { @extend .#{$kendo-prefix}flex-col !optional; }
    .#{$kendo-prefix}flex-column-reverse { @extend .#{$kendo-prefix}flex-col-reverse !optional; }

}

// #endregion
// #region @import "./_flex-grow.scss"; -> packages/utils/scss/flex-grid/_flex-grow.scss
/// This is equivalent to `flex-grow: 1`. It defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
/// @name .k-flex-grow
/// @group flex-grow
/// @contextType css

/// This is equivalent to `flex-grow: 0`. The item will not grow.
/// @name .k-flex-grow-0
/// @group flex-grow
/// @contextType css

@mixin kendo-utils--flex-grid--flex-grow() {

    // Flex grow utility classes
    $kendo-utils-flex-grow: k-map-get( $kendo-utils, "flex-grow" ) !default;
    @include generate-utils( grow, flex-grow, $kendo-utils-flex-grow );
    @include generate-utils( flex-grow, flex-grow, $kendo-utils-flex-grow );

}

// #endregion
// #region @import "./_flex-shrink.scss"; -> packages/utils/scss/flex-grid/_flex-shrink.scss
/// This is equivalent to `flex-shrink: 1`. It determines how much the flex item will shrink relative to the rest of the flex items in the flex container when there isn't enough space on the row.
/// @name .k-flex-shrink
/// @group flex-shrink
/// @contextType css

/// This is equivalent to `flex-shrink: 0`. The item will not shrink.
/// @name .k-flex-shrink-0
/// @group flex-shrink
/// @contextType css

@mixin kendo-utils--flex-grid--flex-shrink() {

    // Flex shrink utility classes
    $kendo-utils-flex-shrink: k-map-get( $kendo-utils, "flex-shrink" ) !default;
    @include generate-utils( shrink, flex-shrink, $kendo-utils-flex-shrink );
    @include generate-utils( flex-shrink, flex-shrink, $kendo-utils-flex-shrink );

}

// #endregion
// #region @import "./_flex-wrap.scss"; -> packages/utils/scss/flex-grid/_flex-wrap.scss
/// This is equivalent to `flex-wrap: wrap`. It allows flex items to wrap as needed onto multiple lines, from top to bottom.
/// @name .k-flex-wrap
/// @group flex-wrap
/// @contextType css

/// This is equivalent to `flex-wrap: nowrap`. All flex items will be on one line.
/// @name .k-flex-nowrap
/// @group flex-wrap
/// @contextType css

/// This is equivalent to `flex-wrap: wrap-reverse`. It allows flex items to wrap as needed onto multiple lines, from bottom to top.
/// @name .k-flex-wrap-reverse
/// @group flex-wrap
/// @contextType css

@mixin kendo-utils--flex-grid--flex-wrap() {

    // Flex wrap utility classes
    $kendo-utils-flex-wrap: k-map-get( $kendo-utils, "flex-wrap" ) !default;
    @include generate-utils( flex, flex-wrap, $kendo-utils-flex-wrap );

}

// #endregion
// #region @import "./_flex.scss"; -> packages/utils/scss/flex-grid/_flex.scss
/// This is equivalent to `flex: 1 1 0%`. It sizes the item not based on its `width`/`height` properties, but based on the available space. This is similar to `flex: 1 1 auto` except it is allowed to shrink beyond its initial size.
/// @name .k-flex-1
/// @group flex
/// @contextType css

/// This is equivalent to `flex: 1 1 auto`. Beware, this is not the default value. It sizes the item based on its `width`/`height` properties, but makes it fully flexible so that they absorb any extra space along the main axis. If all items are either `flex: auto`, `flex: initial`, or `flex: none`, any remaining space after the items have been sized will be distributed evenly to the items with `flex: auto`.
/// @name .k-flex-auto
/// @group flex
/// @contextType css

/// This is the same as `flex: initial;` and the shorthand for the default value: `flex: 0 1 auto`. It sizes the item based on its `width`/`height` properties (or its content if not set). It makes the flex item inflexible when there is some free space left, but allows it to shrink to its minimum when there is not enough space. The alignment abilities or `auto` margins can be used to align flex items along the main axis.
/// @name .k-flex-initial
/// @group flex
/// @contextType css

/// This is equivalent to `flex: 0 0 auto`. It sizes the item according to its `width`/`height` properties, but makes it fully inflexible. This is similar to `flex: initial` except it is not allowed to shrink, even in an overflow situation.
/// @name .k-flex-none
/// @group flex
/// @contextType css

@mixin kendo-utils--flex-grid--flex() {

    // Flex utility classes
    $kendo-utils-flex: k-map-get( $kendo-utils, "flex" ) !default;
    @include generate-utils( flex, flex, $kendo-utils-flex );

}

// #endregion
// #region @import "./_gap.scss"; -> packages/utils/scss/flex-grid/_gap.scss
// TODO: docs

@mixin kendo-utils--flex-grid--gap() {

    // Gap utility classes
    $kendo-utils-gap: k-map-get( $kendo-utils, "gap" ) !default;
    @include generate-utils( gap, gap, $kendo-utils-gap );
    @include generate-utils( gap-x, column-gap, $kendo-utils-gap );
    @include generate-utils( gap-y, row-gap, $kendo-utils-gap );

}

// #endregion
// #region @import "./_grid-auto-columns.scss"; -> packages/utils/scss/flex-grid/_grid-auto-columns.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-auto-columns() {

    // Grid auto columns utility classes
    $kendo-utils-grid-auto-columns: k-map-get( $kendo-utils, "grid-auto-columns" ) !default;
    @include generate-utils( grid-auto-cols, grid-auto-columns, $kendo-utils-grid-auto-columns );

}

// #endregion
// #region @import "./_grid-auto-flow.scss"; -> packages/utils/scss/flex-grid/_grid-auto-flow.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-auto-flow() {

    // Grid auto flow utility classes
    $kendo-utils-grid-auto-flow: k-map-get( $kendo-utils, "grid-auto-flow" ) !default;
    @include generate-utils( grid-flow, grid-auto-flow, $kendo-utils-grid-auto-flow );

}

// #endregion
// #region @import "./_grid-auto-rows.scss"; -> packages/utils/scss/flex-grid/_grid-auto-rows.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-auto-rows() {

    // Grid auto rows utility classes
    $kendo-utils-grid-auto-rows: k-map-get( $kendo-utils, "grid-auto-rows" ) !default;
    @include generate-utils( grid-auto-rows, grid-auto-rows, $kendo-utils-grid-auto-rows );

}

// #endregion
// #region @import "./_grid-column-start-end.scss"; -> packages/utils/scss/flex-grid/_grid-column-start-end.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-column-start-end() {

    // Grid column start utility classes
    $kendo-utils-grid-column-start: k-map-get( $kendo-utils, "grid-column-start" ) !default;
    @include generate-utils( col-start, grid-column-start, $kendo-utils-grid-column-start );


    // Grid column end utility classes
    $kendo-utils-grid-column-end: k-map-get( $kendo-utils, "grid-column-end" ) !default;
    @include generate-utils( col-end, grid-column-end, $kendo-utils-grid-column-end );


    // Grid column span utility classes
    $kendo-utils-grid-column-span: k-map-get( $kendo-utils, "grid-column-span" ) !default;
    @include generate-utils( col-span, grid-column, $kendo-utils-grid-column-span );


    // Legacy aliases
    @include generate-utils( colspan, grid-column, $kendo-utils-grid-column-span );
    .#{$kendo-prefix}colspan-all { @extend .#{$kendo-prefix}colspan-full !optional; } // sass-lint:disable-line class-name-format
    .\!#{$kendo-prefix}colspan-all { @extend .\!#{$kendo-prefix}colspan-full !optional; } // sass-lint:disable-line class-name-format

}

// #endregion
// #region @import "./_grid-row-start-end.scss"; -> packages/utils/scss/flex-grid/_grid-row-start-end.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-row-start-end() {

    // Grid row start/end utility classes
    $kendo-utils-grid-row-start: k-map-get( $kendo-utils, "grid-row-start" ) !default;
    @include generate-utils( row-start, grid-row-start, $kendo-utils-grid-row-start );


    // Grid row start/end utility classes
    $kendo-utils-grid-row-end: k-map-get( $kendo-utils, "grid-row-end" ) !default;
    @include generate-utils( row-end, grid-row-end, $kendo-utils-grid-row-end );


    // Grid row span utility classes
    $kendo-utils-grid-row-span: k-map-get( $kendo-utils, "grid-row-span" ) !default;
    @include generate-utils( row-span, grid-row, $kendo-utils-grid-row-span );


    // Legacy aliases
    @include generate-utils( rowspan, grid-row, $kendo-utils-grid-row-span );
    .#{$kendo-prefix}rowspan-all { @extend .#{$kendo-prefix}rowspan-full !optional; } // sass-lint:disable-line class-name-format
    .\!#{$kendo-prefix}rowspan-all { @extend .\!#{$kendo-prefix}rowspan-full !optional; } // sass-lint:disable-line class-name-format

}

// #endregion
// #region @import "./_grid-template-columns.scss"; -> packages/utils/scss/flex-grid/_grid-template-columns.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-template-columns() {

    // Grid template columns utility classes
    $kendo-utils-grid-template-columns: k-map-get( $kendo-utils, "grid-template-columns" ) !default;
    @include generate-utils( grid-cols, grid-template-columns, $kendo-utils-grid-template-columns );

}

// #endregion
// #region @import "./_grid-template-rows.scss"; -> packages/utils/scss/flex-grid/_grid-template-rows.scss
// TODO: docs

@mixin kendo-utils--flex-grid--grid-template-rows() {

    // Grid template rows utility classes
    $kendo-utils-grid-template-rows: k-map-get( $kendo-utils, "grid-template-rows" ) !default;
    @include generate-utils( grid-rows, grid-template-rows, $kendo-utils-grid-template-rows );

}

// #endregion
// #region @import "./_justify-content.scss"; -> packages/utils/scss/flex-grid/_justify-content.scss
// TODO: docs

@mixin kendo-utils--flex-grid--justify-content() {

    // Justify content utility classes
    $kendo-utils-justify-content: k-map-get( $kendo-utils, "justify-content" ) !default;
    @include generate-utils( justify-content, justify-content, $kendo-utils-justify-content );


    // Custom justify-content classes
    .#{$kendo-prefix}justify-content-stretch > * { flex: 1 0 0%; }
    .\!.#{$kendo-prefix}justify-content-stretch > * { flex: 1 0 0% !important; } // sass-lint:disable-line no-important class-name-format

}

// #endregion
// #region @import "./_justify-items.scss"; -> packages/utils/scss/flex-grid/_justify-items.scss
// TODO: docs

@mixin kendo-utils--flex-grid--justify-items() {

    // Justify items utility classes
    $kendo-utils-justify-items: k-map-get( $kendo-utils, "justify-items" ) !default;
    @include generate-utils( justify-items, justify-items, $kendo-utils-justify-items );

}

// #endregion
// #region @import "./_justify-self.scss"; -> packages/utils/scss/flex-grid/_justify-self.scss
// TODO: docs

@mixin kendo-utils--flex-grid--justify-self() {

    // Justify self utility classes
    $kendo-utils-justify-self: k-map-get( $kendo-utils, "justify-self" ) !default;
    @include generate-utils( justify-self, justify-self, $kendo-utils-justify-self );

}

// #endregion
// #region @import "./_order.scss"; -> packages/utils/scss/flex-grid/_order.scss
/// This is equivalent to `order: -9999;`.
/// @name .k-order-first
/// @group order
/// @contextType css

/// This is equivalent to `order: 9999;`.
/// @name .k-order-last
/// @group order
/// @contextType css

/// This is equivalent to `order: 0;`.
/// @name .k-order-none
/// @group order
/// @contextType css

/// This is equivalent to `order: 1;`, `order: 2;`, `order: 12;`, etc.
/// @name .from k-order-1 to k-order-12
/// @group order
/// @contextType css

@mixin kendo-utils--flex-grid--order() {

    // Order utility classes
    $kendo-utils-order: k-map-get( $kendo-utils, "order" ) !default;
    @include generate-utils( order, order, $kendo-utils-order );

}

// #endregion
// #region @import "./_place-content.scss"; -> packages/utils/scss/flex-grid/_place-content.scss
// TODO: docs

@mixin kendo-utils--flex-grid--place-content() {

    // Place content utility classes
    $kendo-utils-place-content: k-map-get( $kendo-utils, "place-content" ) !default;
    @include generate-utils( place-content, place-content, $kendo-utils-place-content );

}

// #endregion
// #region @import "./_place-items.scss"; -> packages/utils/scss/flex-grid/_place-items.scss
// TODO: docs

@mixin kendo-utils--flex-grid--place-items() {

    // Place items utility classes
    $kendo-utils-place-items: k-map-get( $kendo-utils, "place-items" ) !default;
    @include generate-utils( place-items, place-items, $kendo-utils-place-items );

}

// #endregion
// #region @import "./_place-self.scss"; -> packages/utils/scss/flex-grid/_place-self.scss
// TODO: docs

@mixin kendo-utils--flex-grid--place-self() {

    // Place self utility classes
    $kendo-utils-place-self: k-map-get( $kendo-utils, "place-self" ) !default;
    @include generate-utils( place-self, place-self, $kendo-utils-place-self );

}

// #endregion


@mixin kendo-utils--flex-grid() {
    @include kendo-utils--flex-grid--align-content();
    @include kendo-utils--flex-grid--align-items();
    @include kendo-utils--flex-grid--align-self();
    @include kendo-utils--flex-grid--flex-basis();
    @include kendo-utils--flex-grid--flex-direction();
    @include kendo-utils--flex-grid--flex-grow();
    @include kendo-utils--flex-grid--flex-shrink();
    @include kendo-utils--flex-grid--flex-wrap();
    @include kendo-utils--flex-grid--flex();
    @include kendo-utils--flex-grid--gap();
    @include kendo-utils--flex-grid--grid-auto-columns();
    @include kendo-utils--flex-grid--grid-auto-flow();
    @include kendo-utils--flex-grid--grid-auto-rows();
    @include kendo-utils--flex-grid--grid-column-start-end();
    @include kendo-utils--flex-grid--grid-row-start-end();
    @include kendo-utils--flex-grid--grid-template-columns();
    @include kendo-utils--flex-grid--grid-template-rows();
    @include kendo-utils--flex-grid--justify-content();
    @include kendo-utils--flex-grid--justify-items();
    @include kendo-utils--flex-grid--justify-self();
    @include kendo-utils--flex-grid--order();
    @include kendo-utils--flex-grid--place-content();
    @include kendo-utils--flex-grid--place-items();
    @include kendo-utils--flex-grid--place-self();
}

// #endregion
// #region @import "./spacing/index.import.scss"; -> packages/utils/scss/spacing/index.import.scss
// #region @import "./_margin.scss"; -> packages/utils/scss/spacing/_margin.scss
// TODO: docs

@mixin kendo-utils--spacing--margin() {

    // Margin utility classes
    $kendo-utils-margin: k-map-get( $kendo-utils, "margin" ) !default;
    @include generate-utils( m, margin, $kendo-utils-margin );
    @include generate-utils( mt, margin-top, $kendo-utils-margin );
    @include generate-utils( mr, margin-right, $kendo-utils-margin );
    @include generate-utils( mb, margin-bottom, $kendo-utils-margin );
    @include generate-utils( ml, margin-left, $kendo-utils-margin );
    @include generate-utils( mx, margin-inline, $kendo-utils-margin );
    @include generate-utils( my, margin-block, $kendo-utils-margin );

}

// #endregion
// #region @import "./_padding.scss"; -> packages/utils/scss/spacing/_padding.scss
// TODO: docs

@mixin kendo-utils--spacing--padding() {

    // Padding utility classes
    $kendo-utils-padding: k-map-get( $kendo-utils, "padding" ) !default;
    @include generate-utils( p, padding, $kendo-utils-padding );
    @include generate-utils( pt, padding-top, $kendo-utils-padding );
    @include generate-utils( pr, padding-right, $kendo-utils-padding );
    @include generate-utils( pb, padding-bottom, $kendo-utils-padding );
    @include generate-utils( pl, padding-left, $kendo-utils-padding );
    @include generate-utils( px, padding-inline, $kendo-utils-padding );
    @include generate-utils( py, padding-block, $kendo-utils-padding );

}

// #endregion
// #region @import "./_space-between.scss"; -> packages/utils/scss/spacing/_space-between.scss
// TODO: docs

@mixin kendo-utils--spacing--space-between() {

    // Space between utility classes
    $kendo-utils-space-between: k-map-get( $kendo-utils, "space-between" ) !default;
    @each $key, $value in $kendo-utils-space-between {
        $_key: k-escape-class-name( $key );

        .#{$kendo-prefix}space-x-#{$_key} > * + * {
            margin-inline-start: $value;
        }
        .#{$kendo-prefix}space-y-#{$_key} > * + * {
            margin-block-start: $value;
        }
    }

}

// #endregion


@mixin kendo-utils--spacing() {
    @include kendo-utils--spacing--margin();
    @include kendo-utils--spacing--padding();
    @include kendo-utils--spacing--space-between();
}

// #endregion
// #region @import "./sizing/index.import.scss"; -> packages/utils/scss/sizing/index.import.scss
// #region @import "./_height.scss"; -> packages/utils/scss/sizing/_height.scss
// TODO: docs

@mixin kendo-utils--sizing--height() {

    // Height utility classes
    $kendo-utils-height: k-map-get( $kendo-utils, "height" ) !default;
    @include generate-utils( h, height, $kendo-utils-height );

    // Min height utility classes
    $kendo-utils-min-height: k-map-get( $kendo-utils, "min-height" ) !default;
    @include generate-utils( min-h, min-height, $kendo-utils-min-height );

    // Max height utility classes
    $kendo-utils-max-height: k-map-get( $kendo-utils, "max-height" ) !default;
    @include generate-utils( max-h, max-height, $kendo-utils-max-height );

}

// #endregion
// #region @import "./_width.scss"; -> packages/utils/scss/sizing/_width.scss
// TODO: docs

@mixin kendo-utils--sizing--width() {

    // Width utility classes
    $kendo-utils-width: k-map-get( $kendo-utils, "width" ) !default;
    @include generate-utils( w, width, $kendo-utils-width );

    // Min-width utility classes
    $kendo-utils-min-width: k-map-get( $kendo-utils, "min-width" ) !default;
    @include generate-utils( min-w, min-width, $kendo-utils-min-width );

    // Max-width utility classes
    $kendo-utils-max-width: k-map-get( $kendo-utils, "max-width" ) !default;
    @include generate-utils( max-w, max-width, $kendo-utils-max-width );

}

// #endregion


@mixin kendo-utils--sizing() {
    @include kendo-utils--sizing--height();
    @include kendo-utils--sizing--width();
}

// #endregion
// #region @import "./typography/index.import.scss"; -> packages/utils/scss/typography/index.import.scss
// font family
// #region @import "./_font-size.scss"; -> packages/utils/scss/typography/_font-size.scss
// TODO: docs

@mixin kendo-utils--typography--font-size() {

    // Font size utility classes
    $kendo-utils-font-size: k-map-get( $kendo-utils, "font-size" ) !default;
    @include generate-utils( font-size, font-size, $kendo-utils-font-size );

    // Legacy aliases
    @include generate-utils( fs, font-size, $kendo-utils-font-size );

}

// #endregion
// font smoothing
// #region @import "./_font-style.scss"; -> packages/utils/scss/typography/_font-style.scss
// TODO: docs

@mixin kendo-utils--typography--font-style() {

    // Font style utility classes
    $kendo-utils-font-style: k-map-get( $kendo-utils, "font-style" ) !default;
    @include generate-utils( font, font-style, $kendo-utils-font-style );

}

// #endregion
// #region @import "./_font-weight.scss"; -> packages/utils/scss/typography/_font-weight.scss
// TODO: docs

@mixin kendo-utils--typography--font-weight() {

    // Font weight utility classes
    $kendo-utils-font-weight: k-map-get( $kendo-utils, "font-weight" ) !default;
    @include generate-utils( font, font-weight, $kendo-utils-font-weight );


    // Legacy aliases
    @include generate-utils( font-weight, font-weight, $kendo-utils-font-weight );

}

// #endregion
// font variant
// letter spacing
// line height
// list style
// #region @import "./_text-align.scss"; -> packages/utils/scss/typography/_text-align.scss
// Text-align documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/text-align.

/// This is equivalent to `text-align: left;`. The inline contents are aligned to the left edge of the line box.
/// @name .k-text-left
/// @group text-align
/// @contextType css

/// This is equivalent to `text-align: right;`. The inline contents are aligned to the right edge of the line box.
/// @name .k-text-right
/// @group text-align
/// @contextType css

/// This is equivalent to `text-align: center;`. The inline contents are centered within the line box.
/// @name .k-text-center
/// @group text-align
/// @contextType css

/// This is equivalent to `text-align: justify;`. The inline contents are justified. Text should be spaced to line up its left and right edges to the left and right edges of the line box, except for the last line.
/// @name .k-text-justify
/// @group text-align
/// @contextType css

@mixin kendo-utils--typography--text-align() {

    // Text align utility classes
    $kendo-utils-text-align: k-map-get( $kendo-utils, "text-align" ) !default;

    @include generate-utils( text, text-align, $kendo-utils-text-align );

}

// #endregion
// #region @import "./_text-color.scss"; -> packages/utils/scss/typography/_text-color.scss
// TODO: docs

@mixin kendo-utils--typography--text-color() {

    // Text color utility classes
    $kendo-utils-text-color: k-map-get( $kendo-utils, "text-color" ) !default;
    @include generate-utils( text, color, $kendo-utils-text-color );


    // Legacy aliases
    @include generate-utils( color, color, $kendo-utils-text-color );

}

// #endregion
// text decoration
// #region @import "./_text-transform.scss"; -> packages/utils/scss/typography/_text-transform.scss
// Text-transform documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform.

/// This is equivalent to `text-transform: lowercase;`. Is a keyword that converts all characters to lowercase.
/// @name k-text-lowercase
/// @group text-transform
/// @contextType css

/// This is equivalent to `text-transform: uppercase;`. Is a keyword that converts all characters to uppercase.
/// @name k-text-uppercase
/// @group text-transform
/// @contextType css

/// This is equivalent to `text-transform: capitalize;`. Is a keyword that converts the first letter of each word to uppercase. Other characters remain unchanged (they retain their original case as written in the element's text).
/// @name k-text-capitalize
/// @group text-transform
/// @contextType css

@mixin kendo-utils--typography--text-transform() {

    // Text transform utility classes
    $kendo-utils-text-transform: k-map-get( $kendo-utils, "text-transform" ) !default;
    @include generate-utils( text, text-transform, $kendo-utils-text-transform );

}

// #endregion
// text overflow
// text indent
// vertical align
// #region @import "./_white-space.scss"; -> packages/utils/scss/typography/_white-space.scss
// White-space documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/white-space.

/// This is equivalent to `white-space: normal;`. Sequences of white space are collapsed. Newline characters in the source are handled the same as other white space. Lines are broken as necessary to fill line boxes.
/// @name .k-white-space-normal
/// @group white-space
/// @contextType css

/// This is equivalent to `white-space: nowrap;`. Collapses white space as for normal, but suppresses line breaks (text wrapping) within the source.
/// @name .k-white-space-nowrap
/// @group white-space
/// @contextType css

/// This is equivalent to `white-space: pre;`. Sequences of white space are preserved. Lines are only broken at newline characters in the source and at <br> elements.
/// @name .k-white-space-pre
/// @group white-space
/// @contextType css

/// This is equivalent to `white-space: pre-wrap;`. Sequences of white space are preserved. Lines are broken at newline characters, at <br>, and as necessary to fill line boxes.
/// @name .k-white-space-pre-wrap
/// @group white-space
/// @contextType css

/// This is equivalent to `white-space: pre-line;`. Sequences of white space are collapsed. Lines are broken at newline characters, at <br>, and as necessary to fill line boxes.
/// @name .k-white-space-pre-line
/// @group white-space
/// @contextType css

/// This is equivalent to `white-space: break-spaces;`. Collapses white space as for normal, but suppresses line breaks (text wrapping) within the source.
/// @name .k-white-space-break-spaces
/// @group white-space
/// @contextType css

@mixin kendo-utils--typography--white-space() {

    // White space utility classes
    $kendo-utils-white-space: k-map-get( $kendo-utils, "white-space" ) !default;

    @include generate-utils( white-space, white-space, $kendo-utils-white-space );
    @include generate-utils( whitespace, white-space, $kendo-utils-white-space );


    // Legacy aliases
    .#{$kendo-prefix}text-nowrap { @extend .#{$kendo-prefix}white-space-nowrap !optional; }

}

// #endregion


@mixin kendo-utils--typography() {
    /// This is equivalent to `white-space: nowrap; overflow: hidden; text-overflow: ellipsis;`.
    /// @name .k-text-ellipsis
    /// @group text
    .#{$kendo-prefix}text-ellipsis { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } // sass-lint:disable-line one-declaration-per-line

    @include kendo-utils--typography--font-size();
    @include kendo-utils--typography--font-style();
    @include kendo-utils--typography--font-weight();
    @include kendo-utils--typography--text-align();
    @include kendo-utils--typography--text-color();
    @include kendo-utils--typography--text-transform();
    @include kendo-utils--typography--white-space();
}

// #endregion
// #region @import "./background/index.import.scss"; -> packages/utils/scss/background/index.import.scss
// #region @import "./_background-color.scss"; -> packages/utils/scss/background/_background-color.scss
// TODO: docs

@mixin kendo-utils--background--background-color() {

    // Background color utility classes
    $kendo-utils-background-color: k-map-get( $kendo-utils, "background-color" ) !default;
    @include generate-utils( bg, background-color, $kendo-utils-background-color );

}

// #endregion


@mixin kendo-utils--background() {
    @include kendo-utils--background--background-color();
}

// #endregion
// #region @import "./border/index.import.scss"; -> packages/utils/scss/border/index.import.scss
// #region @import "./_border-color.scss"; -> packages/utils/scss/border/_border-color.scss
// TODO: docs

@mixin kendo-utils--border--border-color() {

    // Border color utility classes
    $kendo-utils-border-color: k-map-get( $kendo-utils, "border-color" ) !default;
    @include generate-utils( border, border-color, $kendo-utils-border-color );
    @include generate-utils( border-t, border-top-color, $kendo-utils-border-color );
    @include generate-utils( border-r, border-right-color, $kendo-utils-border-color );
    @include generate-utils( border-b, border-bottom-color, $kendo-utils-border-color );
    @include generate-utils( border-l, border-left-color, $kendo-utils-border-color );
    @include generate-utils( border-x, border-inline-color, $kendo-utils-border-color );
    @include generate-utils( border-y, border-block-color, $kendo-utils-border-color );

}

// #endregion
// #region @import "./_border-radius.scss"; -> packages/utils/scss/border/_border-radius.scss
// TODO: docs

@mixin kendo-utils--border--border-radius() {

    // Border radius utility classes
    $kendo-utils-border-radius: k-map-get( $kendo-utils, "border-radius" ) !default;
    @include generate-utils( rounded, border-radius, $kendo-utils-border-radius );
    @include generate-utils( rounded-tl, border-top-left-radius, $kendo-utils-border-radius );
    @include generate-utils( rounded-tr, border-top-right-radius, $kendo-utils-border-radius );
    @include generate-utils( rounded-br, border-bottom-right-radius, $kendo-utils-border-radius );
    @include generate-utils( rounded-bl, border-bottom-left-radius, $kendo-utils-border-radius );
    @include generate-utils( rounded-t, ( border-top-left-radius, border-top-right-radius ), $kendo-utils-border-radius );
    @include generate-utils( rounded-r, ( border-top-right-radius, border-bottom-right-radius ), $kendo-utils-border-radius );
    @include generate-utils( rounded-b, ( border-bottom-left-radius, border-bottom-right-radius ), $kendo-utils-border-radius );
    @include generate-utils( rounded-l, ( border-top-left-radius, border-bottom-left-radius ), $kendo-utils-border-radius );

}

// #endregion
// #region @import "./_border-style.scss"; -> packages/utils/scss/border/_border-style.scss
// TODO: docs

@mixin kendo-utils--border--border-style() {

    // Border style utility classes
    $kendo-utils-border-style: k-map-get( $kendo-utils, "border-style" ) !default;
    @include generate-utils( border, border-style, $kendo-utils-border-style );
    @include generate-utils( border-t, border-top-style, $kendo-utils-border-style );
    @include generate-utils( border-r, border-right-style, $kendo-utils-border-style );
    @include generate-utils( border-b, border-bottom-style, $kendo-utils-border-style );
    @include generate-utils( border-l, border-left-style, $kendo-utils-border-style );
    @include generate-utils( border-x, border-inline-style, $kendo-utils-border-style );
    @include generate-utils( border-y, border-block-style, $kendo-utils-border-style );

}

// #endregion
// #region @import "./_border-width.scss"; -> packages/utils/scss/border/_border-width.scss
// TODO: docs

@mixin kendo-utils--border--border-width() {

    // Border width utility classes
    $kendo-utils-border-width: k-map-get( $kendo-utils, "border-width" ) !default;
    @include generate-utils( border, border-width, $kendo-utils-border-width );
    @include generate-utils( border-t, border-top-width, $kendo-utils-border-width );
    @include generate-utils( border-r, border-right-width, $kendo-utils-border-width );
    @include generate-utils( border-b, border-bottom-width, $kendo-utils-border-width );
    @include generate-utils( border-l, border-left-width, $kendo-utils-border-width );
    @include generate-utils( border-x, border-inline-width, $kendo-utils-border-width );
    @include generate-utils( border-y, border-block-width, $kendo-utils-border-width );


    // Legacy aliases
    @include generate-utils( border-top, border-top-width, $kendo-utils-border-width );
    @include generate-utils( border-right, border-right-width, $kendo-utils-border-width );
    @include generate-utils( border-bottom, border-bottom-width, $kendo-utils-border-width );
    @include generate-utils( border-left, border-left-width, $kendo-utils-border-width );

}

// #endregion
// #region @import "./_outline-color.scss"; -> packages/utils/scss/border/_outline-color.scss
// TODO: docs

@mixin kendo-utils--border--outline-color() {

    // Outline color utility classes
    $kendo-utils-outline-color: k-map-get( $kendo-utils, "outline-color" ) !default;
    @include generate-utils( outline, outline-color, $kendo-utils-outline-color );

}

// #endregion
// #region @import "./_outline-offset.scss"; -> packages/utils/scss/border/_outline-offset.scss
// TODO: docs

@mixin kendo-utils--border--outline-offset() {

    // Outline offset utility classes
    $kendo-utils-outline-offset: k-map-get( $kendo-utils, "outline-offset" ) !default;
    @include generate-utils( outline-offset, outline-offset, $kendo-utils-outline-offset );

}

// #endregion
// #region @import "./_outline-style.scss"; -> packages/utils/scss/border/_outline-style.scss
// TODO: docs

@mixin kendo-utils--border--outline-style() {

    // Outline style utility classes
    $kendo-utils-outline-style: k-map-get( $kendo-utils, "outline-style" ) !default;
    @include generate-utils( outline, outline-style, $kendo-utils-outline-style );

}

// #endregion
// #region @import "./_outline-width.scss"; -> packages/utils/scss/border/_outline-width.scss
// TODO: docs

@mixin kendo-utils--border--outline-width() {

    // Outline width utility classes
    $kendo-utils-outline-width: k-map-get( $kendo-utils, "outline-width" ) !default;
    @include generate-utils( outline, outline-width, $kendo-utils-outline-width );

}

// #endregion


@mixin kendo-utils--border() {
    @include kendo-utils--border--border-color();
    @include kendo-utils--border--border-radius();
    @include kendo-utils--border--border-style();
    @include kendo-utils--border--border-width();
    @include kendo-utils--border--outline-color();
    @include kendo-utils--border--outline-offset();
    @include kendo-utils--border--outline-style();
    @include kendo-utils--border--outline-width();
}

// #endregion
// effects
// filter
// #region @import "./table/index.import.scss"; -> packages/utils/scss/table/index.import.scss
// #region @import "./_border-collapse.scss"; -> packages/utils/scss/table/_border-collapse.scss
// TODO: docs

@mixin kendo-utils--table--border-collapse() {

    // Border collapse utility classes
    $kendo-utils-border-collapse: k-map-get( $kendo-utils, "border-collapse" ) !default;
    @include generate-utils( border, border-collapse, $kendo-utils-border-collapse );

}

// #endregion
// #region @import "./_table-layout.scss"; -> packages/utils/scss/table/_table-layout.scss
// Table-layout documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout.

/// This is equivalent to `table-layout: auto;`. By default, most browsers use an automatic table layout algorithm. The widths of the table and its cells are adjusted to fit the content.
/// @name .k-table-layout-auto
/// @group table-layout
/// @contextType css

/// This is equivalent to `table-layout: fixed;`. Table and column widths are set by the widths of table and col elements or by the width of the first row of cells. Cells in subsequent rows do not affect column widths.
/// @name .k-table-layout-fixed
/// @group table-layout
/// @contextType css

@mixin kendo-utils--table--table-layout() {

    // Table layout utility classes
    $kendo-utils-table-layout: k-map-get( $kendo-utils, "table-layout" ) !default;
    @include generate-utils( table, table-layout, $kendo-utils-table-layout );
    @include generate-utils( table-layout, table-layout, $kendo-utils-table-layout );

}

// #endregion


@mixin kendo-utils--table() {
    @include kendo-utils--table--border-collapse();
    @include kendo-utils--table--table-layout();
}

// #endregion
// transition
// #region @import "./transform/index.import.scss"; -> packages/utils/scss/transform/index.import.scss
// #region @import "./_flip.scss"; -> packages/utils/scss/transform/_flip.scss
/// This is equivalent to `transform: scaleX( -1 );`. Flips the element horizontally.
/// @name .k-flip-h
/// @group transform
/// @contextType css

/// This is equivalent to `transform: scaleY( -1 );`. Flips the element vertically.
/// @name .k-flip-v
/// @group transform
/// @contextType css

// TODO: consider globally horizontal vs h vs x

@mixin kendo-utils--transform--flip() {

    // Flip utility classes
    $kendo-utils-flip: k-map-get( $kendo-utils, "flip" ) !default;
    @if $kendo-utils-flip {
        .#{$kendo-prefix}flip-h { transform: scaleX( -1 ); }
        .\!#{$kendo-prefix}flip-h { transform: scaleX( -1 ) !important; } // sass-lint:disable-line no-important
        .#{$kendo-prefix}flip-v { transform: scaleY( -1 ); }
        .\!#{$kendo-prefix}flip-v { transform: scaleY( -1 ) !important; } // sass-lint:disable-line no-important
        .#{$kendo-prefix}flip-h.#{$kendo-prefix}flip-v { transform: scale( -1, -1 ); }
        .\!#{$kendo-prefix}flip-h.\!#{$kendo-prefix}flip-v { transform: scale( -1, -1 ) !important; } // sass-lint:disable-line no-important

        // Legacy aliases
        .#{$kendo-prefix}flip-x { @extend .#{$kendo-prefix}flip-h !optional; }
        .\!#{$kendo-prefix}flip-x { @extend .\!#{$kendo-prefix}flip-h !optional; }
        .#{$kendo-prefix}flip-y { @extend .#{$kendo-prefix}flip-v !optional; }
        .\!#{$kendo-prefix}flip-y { @extend .\!#{$kendo-prefix}flip-v !optional; }
    }

}

// #endregion
// #region @import "./_origin.scss"; -> packages/utils/scss/transform/_origin.scss
// TODO: docs

@mixin kendo-utils--transform--origin() {

    // Transform origin utility classes
    $kendo-utils-origin: k-map-get( $kendo-utils, "origin" ) !default;
    @include generate-utils( origin, transform-origin, $kendo-utils-origin );

}

// #endregion
// #region @import "./_rotate.scss"; -> packages/utils/scss/transform/_rotate.scss
/// This is equivalent to `transform: rotate( 0 );`. Does not rotate the element.
/// @name .k-rotate-0
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 45deg );`. Rotates the element by 45 degrees.
/// @name .k-rotate-45
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 90deg );`. Rotates the element by 90 degrees.
/// @name .k-rotate-90
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 135deg );`. Rotates the element by 135 degrees.
/// @name .k-rotate-135
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 180deg );`. Rotates the element by 180 degrees.
/// @name .k-rotate-180
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 225deg );`. Rotates the element by 225 degrees.
/// @name .k-rotate-225
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 270deg );`. Rotates the element by 270 degrees.
/// @name .k-rotate-270
/// @group transform
/// @contextType css

/// This is equivalent to `transform: rotate( 315deg );`. Rotates the element by 315 degrees.
/// @name .k-rotate-315
/// @group transform
/// @contextType css

// sass-lint:disable function-name-format
@function __rotate( $val ) {
    @return rotate( $val );
}
// sass-lint:enable function-name-format

@mixin kendo-utils--transform--rotate() {

    // Rotate utility classes
    $kendo-utils-rotate: k-map-get( $kendo-utils, "rotate" ) !default;
    @include generate-utils( rotate, transform, $kendo-utils-rotate, __rotate );

}

// #endregion
// #region @import "./_scale.scss"; -> packages/utils/scss/transform/_scale.scss
/// This is equivalent to `transform: scale( 0, 0 );`. The element is shrunk and no longer visible.
/// @name .k-scale-0
/// @group transform
/// @contextType css

/// This is equivalent to `transform: scale( 1, 1 );`. The element has its default scale.
/// @name .k-scale-1
/// @group transform
/// @contextType css

/// This is equivalent to `transform: scale( 2, 2 );`. The element is scaling two times in both directions.
/// @name .k-scale-2
/// @group transform
/// @contextType css

// sass-lint:disable function-name-format
@function __scale( $val ) {
    @return scale( $val );
}
@function __scale-x( $val ) {
    @return scaleX( $val );
}
@function __scale-y( $val ) {
    @return scaleY( $val );
}
// sass-lint:enable function-name-format

@mixin kendo-utils--transform--scale() {

    // Scale utility classes
    $kendo-utils-scale: k-map-get( $kendo-utils, "scale" ) !default;
    @include generate-utils( scale, transform, $kendo-utils-scale, __scale );
    @include generate-utils( scale-x, transform, $kendo-utils-scale, __scale-x );
    @include generate-utils( scale-y, transform, $kendo-utils-scale, __scale-y );

}

// #endregion
// #region @import "./_skew.scss"; -> packages/utils/scss/transform/_skew.scss
// TODO: docs

// sass-lint:disable function-name-format
@function __skew-x( $val ) {
    @return skewX( $val );
}
@function __skew-y( $val ) {
    @return skewY( $val );
}
// sass-lint:enable function-name-format

@mixin kendo-utils--transform--skew() {

    // Transform skew utility classes
    $kendo-utils-skew: k-map-get( $kendo-utils, "skew" ) !default;
    @include generate-utils( skew-x, transform, $kendo-utils-skew, __skew-x );
    @include generate-utils( skew-y, transform, $kendo-utils-skew, __skew-y );

}

// #endregion
// #region @import "./_translate.scss"; -> packages/utils/scss/transform/_translate.scss
/// This is equivalent to `transform: translate( 0, 0 );`. The element does not move.
/// @name .k-translate-0
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 0, 50% );`. The element moves vertically by 50% of its height.
/// @name .k-translate-0-50
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 0, 100% );`. The element moves vertically by 100% of its height.
/// @name .k-translate-0-100
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 50%, 0 );`. The element moves horizontally by 50% of its width.
/// @name .k-translate-50-0
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 50%, 50% );`. The element moves horizontally by 50% of its width and vertically by 50% of its height.
/// @name .k-translate-50-50
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 50%, 100% );`. The element moves horizontally by 50% of its width and vertically by 100% of its height.
/// @name .k-translate-50-100
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 100%, 0 );`. The element moves horizontally by 100% of its width.
/// @name .k-translate-100-0
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 100%, 50% );`. The element moves horizontally by 100% of its width and vertically by 50% of its height.
/// @name .k-translate-100-50
/// @group transform
/// @contextType css

/// This is equivalent to `transform: translate( 100%, 100% );`. The element moves horizontally by 100% of its width and vertically by 100% of its height.
/// @name .k-translate-100-100
/// @group transform
/// @contextType css

// sass-lint:disable function-name-format
@function __translate( $val ) {
    @return translate( $val );
}
@function __translate-x( $val ) {
    @return translateX( $val );
}
@function __translate-y( $val ) {
    @return translateY( $val );
}
// sass-lint:enable function-name-format

@mixin kendo-utils--transform--translate() {

    // Translate utility classes
    $kendo-utils-translate: k-map-get( $kendo-utils, "translate" ) !default;
    $kendo-utils-translate-xy: (
        "0": ( 0, 0 ),
        "0-50": ( 0, 50% ),
        "0-100": ( 0, 100% ),
        "50-0": ( 50%, 0 ),
        "50-50": ( 50%, 50% ),
        "50-100": ( 50%, 100% ),
        "100-0": ( 100%, 0 ),
        "100-50": ( 100%, 50% ),
        "100-100": ( 100%, 100% )
    ) !default;
    @include generate-utils( translate, transform, $kendo-utils-translate-xy, __translate );
    @include generate-utils( translate-x, transform, $kendo-utils-translate, __translate-x );
    @include generate-utils( translate-y, transform, $kendo-utils-translate, __translate-y );

}

// #endregion


@mixin kendo-utils--transform() {
    @include kendo-utils--transform--flip();
    @include kendo-utils--transform--origin();
    @include kendo-utils--transform--rotate();
    @include kendo-utils--transform--scale();
    @include kendo-utils--transform--skew();
    @include kendo-utils--transform--translate();
}

// #endregion
// #region @import "./interactivity/index.import.scss"; -> packages/utils/scss/interactivity/index.import.scss
// #region @import "./_accent-color.scss"; -> packages/utils/scss/interactivity/_accent-color.scss
// TODO: docs

@mixin kendo-utils--interactivity--accent-color() {

    // Accent color utility classes
    $kendo-utils-accent-color: k-map-get( $kendo-utils, "accent-color" ) !default;
    @include generate-utils( accent-color, accent-color, $kendo-utils-accent-color );

}

// #endregion
// #region @import "./_appearance.scss"; -> packages/utils/scss/interactivity/_appearance.scss
/// This is equivalent to `appearance: none;`. Resets any browser specific styling on an element.
/// @name .k-appearance-none
/// @group appearance
/// @contextType css

/// This is equivalent to `appearance: auto;`. The user agent selects the appropriate special styling based on the element. Acts as `none` on elements with no special styling.
/// @name .k-appearance-auto
/// @group appearance
/// @contextType css

@mixin kendo-utils--interactivity--appearance() {

    // Appearance utility classes
    $kendo-utils-appearance: k-map-get( $kendo-utils, "appearance" ) !default;
    @include generate-utils( appearance, appearance, $kendo-utils-appearance );

}

// #endregion
// #region @import "./_caret-color.scss"; -> packages/utils/scss/interactivity/_caret-color.scss
// TODO: docs

@mixin kendo-utils--interactivity--caret-color() {

    // Caret color utility classes
    $kendo-utils-caret-color: k-map-get( $kendo-utils, "caret-color" ) !default;
    @include generate-utils( caret, caret-color, $kendo-utils-caret-color );

}

// #endregion
// #region @import "./_cursor.scss"; -> packages/utils/scss/interactivity/_cursor.scss
// TODO: docs

@mixin kendo-utils--interactivity--cursor() {

    // Cursor utility classes
    $kendo-utils-cursor: k-map-get( $kendo-utils, "cursor" ) !default;
    @include generate-utils( cursor, cursor, $kendo-utils-cursor );

}

// #endregion
// #region @import "./_pointer-events.scss"; -> packages/utils/scss/interactivity/_pointer-events.scss
// Pointer-events documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events.

/// This is equivalent to `pointer-events: none;`. The element is never the target of pointer events; however, pointer events may target its descendant elements if those descendants have pointer-events set to some other value. In these circumstances, pointer events will trigger event listeners on this parent element as appropriate on their way to/from the descendant during the event capture/bubble phases.
/// @name .k-pointer-events-none
/// @group pointer-events
/// @contextType css

/// This is equivalent to `pointer-events: auto;`. The element behaves as it would if the pointer-events property were not specified. In SVG content, this value and the value visiblePainted have the same effect.
/// @name .k-pointer-events-auto
/// @group pointer-events
/// @contextType css

@mixin kendo-utils--interactivity--pointer-events() {

    // Pointer events utility classes
    $kendo-utils-pointer-events: k-map-get( $kendo-utils, "pointer-events" ) !default;
    @include generate-utils( pointer-events, pointer-events, $kendo-utils-pointer-events );

}

// #endregion
// #region @import "./_resize.scss"; -> packages/utils/scss/interactivity/_resize.scss
// Resize documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/resize.

/// This is equivalent to `resize: both;`. The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.
/// @name .k-resize
/// @group resize
/// @contextType css

/// This is equivalent to `resize: none;`. The element offers no user-controllable method for resizing it.
/// @name .k-resize-none
/// @group resize
/// @contextType css

/// This is equivalent to `resize: horizontal;`. The element displays a mechanism for allowing the user to resize it in the horizontal direction.
/// @name .k-resize-x
/// @group resize
/// @contextType css

/// This is equivalent to `resize: vertical;`. The element displays a mechanism for allowing the user to resize it in the vertical direction.
/// @name .k-resize-y
/// @group resize
/// @contextType css

@mixin kendo-utils--interactivity--resize() {

    // Resize utility classes
    $kendo-utils-resize: k-map-get( $kendo-utils, "resize" ) !default;
    @include generate-utils( resize, resize, $kendo-utils-resize );

}

// #endregion
// #region @import "./_scroll.scss"; -> packages/utils/scss/interactivity/_scroll.scss
// TODO: docs

@mixin kendo-utils--interactivity--scroll() {

    // Scroll behavior utility classes
    $kendo-utils-scroll-behavior: k-map-get( $kendo-utils, "scroll-behavior" ) !default;
    @include generate-utils( scroll, scroll-behavior, $kendo-utils-scroll-behavior );


    // Scroll snap type utility classes
    $kendo-utils-scroll-snap-type: k-map-get( $kendo-utils, "scroll-snap-type" ) !default;
    @include generate-utils( scroll-snap, scroll-snap-type, $kendo-utils-scroll-snap-type );

    // Custom scroll snap type utility classes
    .#{$kendo-prefix}scroll-snap-mandatory { #{--#{$kendo-prefix}scroll-snap-strictness}: mandatory; }
    .#{$kendo-prefix}scroll-snap-proximity { #{--#{$kendo-prefix}scroll-snap-strictness}: proximity; }


    // Scroll snap stop utility classes
    $kendo-utils-scroll-snap-stop: k-map-get( $kendo-utils, "scroll-snap-stop" ) !default;
    @include generate-utils( scroll-snap-stop, scroll-snap-stop, $kendo-utils-scroll-snap-stop );


    // Scroll snap align utility classes
    $kendo-utils-scroll-snap-align: k-map-get( $kendo-utils, "scroll-snap-align" ) !default;
    @include generate-utils( scroll-snap-align, scroll-snap-align, $kendo-utils-scroll-snap-align );


    // Scroll margin utility classes
    $kendo-utils-scroll-margin: k-map-get( $kendo-utils, "scroll-margin" ) !default;
    @include generate-utils( scroll-m, scroll-margin, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-mt, scroll-margin-top, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-mr, scroll-margin-right, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-mb, scroll-margin-bottom, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-ml, scroll-margin-left, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-mx, scroll-margin-inline, $kendo-utils-scroll-margin );
    @include generate-utils( scroll-my, scroll-margin-block, $kendo-utils-scroll-margin );


    // Scroll padding utility classes
    $kendo-utils-scroll-padding: k-map-get( $kendo-utils, "scroll-padding" ) !default;
    @include generate-utils( scroll-p, scroll-padding, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-pt, scroll-padding-top, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-pr, scroll-padding-right, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-pb, scroll-padding-bottom, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-pl, scroll-padding-left, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-px, scroll-padding-inline, $kendo-utils-scroll-padding );
    @include generate-utils( scroll-py, scroll-padding-block, $kendo-utils-scroll-padding );

}

// #endregion
// #region @import "./_touch-action.scss"; -> packages/utils/scss/interactivity/_touch-action.scss
// TODO: docs

/// This is equivalent to `touch-action: none;`. Disable browser handling of all panning and zooming gestures.
/// @name .k-touch-action-none
/// @group touch-action
/// @contextType css

/// This is equivalent to `touch-action: auto;`. Enable browser handling of all panning and zooming gestures.
/// @name .k-touch-action-auto
/// @group touch-action
/// @contextType css

@mixin kendo-utils--interactivity--touch-action() {

    // Touch-action utility classes
    $kendo-utils-touch-action: k-map-get( $kendo-utils, "touch-action" ) !default;
    @include generate-utils( touch-action, touch-action, $kendo-utils-touch-action );

}

// #endregion
// #region @import "./_user-select.scss"; -> packages/utils/scss/interactivity/_user-select.scss
// User-select documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/user-select.

/// This is equivalent to `user-select: none;`. The text of the element and its sub-elements is not selectable. Note that the Selection object can contain these elements.
/// @name .k-user-select-none
/// @group user-select
/// @contextType css

/// This is equivalent to `user-select: auto;`. This is the default value of the `user-select` property.
/// @name .k-user-select-auto
/// @group user-select
/// @contextType css

/// This is equivalent to `user-select: text;`. The text can be selected by the user.
/// @name .k-user-select-text
/// @group user-select
/// @contextType css

/// This is equivalent to `user-select: all;`. The content of the element shall be selected atomically: If a selection would contain part of the element, then the selection must contain the entire element including all its descendants.  If a double-click or context-click occurred in sub-elements, the highest ancestor with this value will be selected.
/// @name .k-user-select-all
/// @group user-select
/// @contextType css

/// This is equivalent to `user-select: contain;`. Enables selection to start within the element; however, the selection will be contained by the bounds of that element.
/// @name .k-user-select-contain
/// @group user-select
/// @contextType css

@mixin kendo-utils--interactivity--user-select() {

    // User select utility classes
    $kendo-utils-user-select: k-map-get( $kendo-utils, "user-select" ) !default;
    @include generate-utils( user-select, user-select, $kendo-utils-user-select );

}

// #endregion
// #region @import "./_will-change.scss"; -> packages/utils/scss/interactivity/_will-change.scss
// TODO: docs

@mixin kendo-utils--interactivity--will-change() {

    // Will change utility classes
    $kendo-utils-will-change: k-map-get( $kendo-utils, "will-change" ) !default;
    @include generate-utils( will-change, will-change, $kendo-utils-will-change );

}

// #endregion


@mixin kendo-utils--interactivity() {
    @include kendo-utils--interactivity--accent-color();
    @include kendo-utils--interactivity--appearance();
    @include kendo-utils--interactivity--caret-color();
    @include kendo-utils--interactivity--cursor();
    @include kendo-utils--interactivity--pointer-events();
    @include kendo-utils--interactivity--resize();
    @include kendo-utils--interactivity--scroll();
    @include kendo-utils--interactivity--touch-action();
    @include kendo-utils--interactivity--user-select();
    @include kendo-utils--interactivity--will-change();
}

// #endregion


// Mixin for all styles
@mixin kendo-utils() {
    @include kendo-utils--accessibility();
    @include kendo-utils--layout();
    @include kendo-utils--flex-grid();
    @include kendo-utils--spacing();
    @include kendo-utils--sizing();
    @include kendo-utils--typography();
    @include kendo-utils--background();
    @include kendo-utils--border();
    @include kendo-utils--table();
    @include kendo-utils--transform();
    @include kendo-utils--interactivity();
}

// #endregion

@include kendo-utils();
